"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSchema = void 0;
const validate_1 = require("@kubernetes-models/validate");
const IoK8sApimachineryPkgApisMetaV1LabelSelector_1 = require("@kubernetes-models/apimachinery/_schemas/IoK8sApimachineryPkgApisMetaV1LabelSelector");
const schema = {
    "properties": {
        "labelSelector": {
            "oneOf": [
                {
                    "$ref": "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector#"
                },
                {
                    "type": "null"
                }
            ]
        },
        "matchLabelKeys": {
            "items": {
                "type": "string"
            },
            "type": "array",
            "nullable": true
        },
        "maxSkew": {
            "format": "int32",
            "type": "integer"
        },
        "minDomains": {
            "format": "int32",
            "type": "integer",
            "nullable": true
        },
        "nodeAffinityPolicy": {
            "enum": [
                "Honor",
                "Ignore"
            ],
            "type": "string",
            "nullable": true
        },
        "nodeTaintsPolicy": {
            "enum": [
                "Honor",
                "Ignore"
            ],
            "type": "string",
            "nullable": true
        },
        "topologyKey": {
            "type": "string"
        },
        "whenUnsatisfiable": {
            "enum": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ],
            "type": "string"
        }
    },
    "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
    ],
    "type": "object"
};
function addSchema() {
    (0, IoK8sApimachineryPkgApisMetaV1LabelSelector_1.addSchema)();
    (0, validate_1.register)("io.k8s.api.core.v1.TopologySpreadConstraint", schema);
}
exports.addSchema = addSchema;

{"version":3,"file":"logger-2b83e688.node.cjs","sources":["../src/cli/error.ts","../src/commands/generate/set-option.ts","../src/commands/generate/env.ts","../src/commands/generate/error.ts","../src/commands/generate/worker.ts","../src/cli/logger.ts"],"sourcesContent":["import logger, { LogLevel } from \"@kosko/log\";\nimport { exit } from \"node:process\";\n\nexport class CLIError extends Error {\n  public readonly output?: string;\n  public readonly code?: number;\n\n  public constructor(\n    msg: string,\n    { output, code }: { output?: string; code?: number } = {}\n  ) {\n    super(msg);\n    this.output = output;\n    this.code = code;\n  }\n}\n\nCLIError.prototype.name = \"CLIError\";\n\n/**\n * Handles errors thrown by {@link run} function.\n *\n * @remarks\n * This function prints error message to logger and terminates current process\n * with status code specified in `err` object.\n *\n * @example\n * ```ts\n * run().catch(handleError);\n * ```\n *\n * @public\n */\nexport function handleError(err: unknown): void {\n  let code = 1;\n\n  if (err instanceof CLIError) {\n    if (err.code != null) {\n      code = err.code;\n    }\n\n    if (typeof err.output === \"string\") {\n      if (err.output) {\n        logger.log(LogLevel.Error, err.output);\n      }\n    } else {\n      logger.log(LogLevel.Error, err.message, { error: err });\n    }\n  } else if (err instanceof Error) {\n    if (err.name !== \"YError\") {\n      logger.log(LogLevel.Error, \"\", { error: err });\n    }\n  } else {\n    logger.log(LogLevel.Error, \"\", { error: err });\n  }\n\n  exit(code);\n}\n","import { Reducer } from \"@kosko/env\";\nimport jp from \"jsonpath\";\nimport { CLIError } from \"../../cli/error\";\n\n/**\n * Contains a value to override a variable of the specified component\n * by the specified key.\n *\n * @internal\n */\nexport interface SetOption {\n  componentName?: string;\n  key: string;\n  value: string;\n}\n\n// Splits strings like `something[a==b]=c` into `something[a==b]` and `c`\nconst parseRegexp = /^(.*?[^=<>~])=([^=<>~].*?$)/;\n\nfunction parseSetOptionValue(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    // if value is not a valid JSON, then it\n    // is considered to be a plain string\n    return value;\n  }\n}\n\nfunction parseKeyValuePair(s: unknown): SetOption {\n  // s has unknown type because yargs converts a string\n  // to a number in case of nested objects\n  if (typeof s !== \"string\") {\n    throw new Error(`The specified value \"${s}\" is not a string.`);\n  }\n\n  const matches = s.match(parseRegexp);\n\n  if (matches == null || matches.length !== 3) {\n    throw new Error(\n      `Cannot parse string \"${s}\". Expected format is \"<key>=<value>\".`\n    );\n  }\n\n  return {\n    key: matches[1],\n    value: parseSetOptionValue(matches[2])\n  };\n}\n\n/**\n * Parses arguments provided by `yargs-parser` into a list of key-value pairs\n * for components.\n *\n * @param arg - Arguments provided by `yargs-parser`.\n * @internal\n */\nexport function parseSetOptions(arg: unknown): SetOption[] {\n  const result: SetOption[] = [];\n  const argsArray: unknown[] = Array.isArray(arg) ? arg : [arg];\n\n  for (const argItem of argsArray) {\n    // if item is an object then it contains component variables\n    if (typeof argItem === \"object\" && argItem !== null) {\n      // for each component there is a key in the object\n      for (const argKey of Object.keys(argItem)) {\n        // if only one value is specified then argValues is a string\n        // if multiple values are specified then argValues is an array\n        let argValues = (argItem as any)[argKey];\n\n        // wrap a single string value to the array so we can\n        // unify futher processing\n        if (!Array.isArray(argValues)) {\n          argValues = [argValues];\n        }\n\n        for (const value of argValues) {\n          result.push({\n            ...parseKeyValuePair(value),\n            componentName: argKey\n          });\n        }\n      }\n    }\n    // otherwise it's a global variable\n    else {\n      result.push(parseKeyValuePair(argItem));\n    }\n  }\n\n  return result;\n}\n\n/**\n * Creates a reducer from the specified set arguments.\n *\n * @param setOptions - List of set arguments.\n * @internal\n */\nexport function createCLIEnvReducer(setOptions: SetOption[]): Reducer {\n  // Try to parse and see if the JSON path is invalid\n  for (const opt of setOptions) {\n    try {\n      jp.parse(opt.key);\n    } catch (err: any) {\n      throw new CLIError(err.message, {\n        code: 1,\n        output: `Invalid JSONPath expression \"${opt.key}\": ${err.message}`\n      });\n    }\n  }\n\n  // reorder arguments to ensure that global overrides will be applied\n  // before the component ones\n  const argsOrdered = setOptions.sort((a, b) =>\n    a.componentName === b.componentName ? 0 : a.componentName ? 1 : -1\n  );\n\n  const reducer: Reducer = {\n    name: \"cli\",\n    reduce(target: Record<string, any>, componentName?: string) {\n      for (const variable of argsOrdered) {\n        const isGlobalVariable = !variable.componentName;\n\n        if (isGlobalVariable || variable.componentName === componentName) {\n          jp.apply(target, \"$.\" + variable.key, () => variable.value);\n        }\n      }\n\n      return target;\n    }\n  };\n\n  return reducer;\n}\n","import { Config } from \"@kosko/config\";\nimport { Environment } from \"@kosko/env\";\nimport { BaseGenerateArguments } from \"./types\";\nimport { createCLIEnvReducer } from \"./set-option\";\nimport resolveFrom from \"resolve-from\";\nimport pkgUp from \"pkg-up\";\nimport { dirname, join } from \"node:path\";\nimport { readFile } from \"node:fs/promises\";\nimport { pathToFileURL } from \"node:url\";\nimport { env } from \"node:process\";\n\nconst KOSKO_ENV = \"@kosko/env\";\n\nfunction excludeFalsyInArray<T>(input: (T | undefined | null)[]): T[] {\n  return input.filter(Boolean) as T[];\n}\n\nfunction pickEnvArray(envs: string[]): string | string[] | undefined {\n  if (envs.length > 1) return envs;\n  return envs[0];\n}\n\nasync function importDefault(id: string) {\n  const mod = await import(id);\n  return mod.default;\n}\n\nasync function getESMEntry(cwd: string) {\n  const pkgPath = await pkgUp({ cwd });\n  if (!pkgPath) return;\n\n  const pkg = JSON.parse(await readFile(pkgPath, \"utf-8\"));\n  if (!pkg.module) return;\n\n  const path = join(pkgPath, \"..\", pkg.module);\n  return pathToFileURL(path).toString();\n}\n\nasync function importEnvNode(cwd: string): Promise<Environment[]> {\n  const envPath = resolveFrom(cwd, KOSKO_ENV);\n  const envs: Environment[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  envs.push(require(envPath));\n\n  // Why `@kosko/env` package has to be imported twice? Because the cache on\n  // CommonJS and ESM are separated, which means we have two isolated\n  // instances of `Environment`, and each of them must be initialized\n  // in order to make sure users can access the environment in both CommonJS\n  // and ESM environment.\n  if (env.ESM_IMPORT_DISABLED !== \"1\") {\n    const envModUrl = await getESMEntry(dirname(envPath));\n\n    if (envModUrl) {\n      envs.push(await importDefault(envModUrl));\n    }\n  }\n\n  return envs;\n}\n\nasync function importEnvGeneric(): Promise<Environment[]> {\n  return [await importDefault(KOSKO_ENV)];\n}\n\nexport async function setupEnv(\n  config: Config,\n  args: BaseGenerateArguments\n): Promise<void> {\n  const cwd = args.cwd;\n  const envs =\n    // eslint-disable-next-line no-restricted-globals\n    process.env.BUILD_TARGET === \"node\"\n      ? await importEnvNode(cwd)\n      : await importEnvGeneric();\n\n  const paths = config.paths?.environment || {};\n  const setReducer = args.set?.length\n    ? createCLIEnvReducer(args.set)\n    : undefined;\n\n  // Initialize all environments\n  for (const env of envs) {\n    env.cwd = cwd;\n    env.env = pickEnvArray(\n      excludeFalsyInArray([config.baseEnvironment, args.env])\n    );\n\n    if (config.extensions) env.extensions = [...config.extensions];\n\n    if (paths.global) env.paths.global = paths.global;\n    if (paths.component) env.paths.component = paths.component;\n\n    if (setReducer) {\n      env.setReducers((reducers) => [...reducers, setReducer]);\n    }\n  }\n}\n","import AggregateError from \"@kosko/aggregate-error\";\nimport { GenerateError, ResolveError } from \"@kosko/generate\";\nimport cleanStack from \"clean-stack\";\nimport extractStack from \"extract-stack\";\nimport pc from \"picocolors\";\nimport { CLIError } from \"../../cli/error\";\nimport stringify from \"fast-safe-stringify\";\nimport { isRecord } from \"@kosko/common-utils\";\nimport { stderr } from \"node:process\";\nimport { BaseGenerateArguments } from \"./types\";\n\nfunction flattenError(err: unknown): unknown[] {\n  if (err instanceof AggregateError) {\n    return err.errors.flatMap(flattenError);\n  }\n\n  return [err];\n}\n\nfunction print(line: string): void {\n  stderr.write(line + \"\\n\");\n}\n\nfunction getErrorCount(n: number): string {\n  return `${n} error${n === 1 ? \"\" : \"s\"}`;\n}\n\ninterface ErrorLike {\n  name: string;\n  message: string;\n  stack?: string;\n}\n\nfunction toErrorLike(err: unknown): ErrorLike | undefined {\n  if (err instanceof Error) return err;\n\n  if (isRecord(err)) {\n    const { name, message, stack } = err;\n\n    if (typeof message === \"string\") {\n      return {\n        name: (typeof name === \"string\" && name) || \"Error\",\n        message,\n        ...(typeof stack === \"string\" && { stack })\n      };\n    }\n  }\n\n  if (typeof err === \"string\") {\n    return { name: \"Error\", message: err };\n  }\n}\n\n// https://github.com/ajv-validator/ajv/blob/v8.11.0/lib/types/index.ts#L85\ninterface AjvErrorObject {\n  instancePath: string;\n  message?: string;\n  params: unknown;\n  keyword: \"type\" | \"enum\" | \"oneOf\";\n}\n\n// https://github.com/ajv-validator/ajv/blob/v8.11.0/lib/runtime/validation_error.ts\ninterface AjvValidationErrorLike {\n  errors: readonly AjvErrorObject[];\n}\n\nfunction isAjvValidationErrorLike(\n  value: unknown\n): value is AjvValidationErrorLike {\n  return (\n    isRecord(value) &&\n    value.ajv === true &&\n    value.validation === true &&\n    Array.isArray(value.errors)\n  );\n}\n\nfunction stringifyAjvErrorObject(err: AjvErrorObject) {\n  let msg = err.instancePath;\n\n  if (err.message) {\n    msg += ` ${err.message}`;\n  }\n\n  if (\n    err.keyword === \"enum\" &&\n    isRecord(err.params) &&\n    Array.isArray(err.params.allowedValues)\n  ) {\n    msg += `: ${stringify(err.params.allowedValues)}`;\n  }\n\n  return msg;\n}\n\nfunction getFormattedErrorTitle(err: ErrorLike) {\n  return \"  \" + pc.red(`✖ ${err.name}: ${err.message}`);\n}\n\nfunction getFormattedErrorStack(err: ErrorLike, extraIndent = \"\") {\n  if (typeof err.stack !== \"string\") return;\n\n  let stack = cleanStack(extractStack(err));\n\n  if (extraIndent) {\n    stack = stack\n      .split(\"\\n\")\n      .map((line) => extraIndent + line)\n      .join(\"\\n\");\n  }\n\n  return pc.gray(stack);\n}\n\nfunction stringifyCause(cause: unknown) {\n  if (isAjvValidationErrorLike(cause)) {\n    return (\n      \"\\n\" +\n      cause.errors\n        .map((err) => `      ${stringifyAjvErrorObject(err)}`)\n        .join(\"\\n\")\n    );\n  }\n\n  const err = toErrorLike(cause);\n  if (!err) return;\n\n  return [\n    `    ${err.name}: ${err.message}`,\n    getFormattedErrorStack(err, \"  \")\n  ].join(\"\\n\");\n}\n\nfunction stringifyResolveError(err: ResolveError): string {\n  const lines: string[] = [getFormattedErrorTitle(err)];\n\n  function appendMeta(name: string, value: string) {\n    lines.push(`    ${name}: ${value}`);\n  }\n\n  if (err.index?.length) {\n    appendMeta(\"Index\", `[${err.index.join(\", \")}]`);\n  }\n\n  if (err.component) {\n    const { apiVersion, kind, name, namespace } = err.component;\n\n    appendMeta(\"Kind\", `${apiVersion}/${kind}`);\n    if (namespace) appendMeta(\"Namespace\", namespace);\n    appendMeta(\"Name\", name);\n  }\n\n  const cause = stringifyCause(err.cause);\n  if (cause) lines.push(cause);\n\n  return lines.join(\"\\n\");\n}\n\nexport function handleGenerateError(\n  cwd: string,\n  error: unknown,\n  options: Pick<BaseGenerateArguments, \"bail\">\n) {\n  const allErrors = flattenError(error);\n  const pathErrorsMap: Record<string, string[]> = {};\n  const unknownErrors: ErrorLike[] = [];\n\n  function pushToPathErrorsMap(path: string, value: string) {\n    pathErrorsMap[path] ??= [];\n    pathErrorsMap[path].push(value);\n  }\n\n  function prettifyPath(path: string): string {\n    if (path.startsWith(cwd)) {\n      path = path.substring(cwd.length).replace(/^[/\\\\]+/, \"\");\n    }\n\n    return path.replace(/\\\\/g, \"/\");\n  }\n\n  for (const err of allErrors) {\n    if (err instanceof ResolveError && err.path) {\n      pushToPathErrorsMap(err.path, stringifyResolveError(err));\n    } else if (err instanceof GenerateError && err.path) {\n      pushToPathErrorsMap(err.path, stringifyResolveError(err));\n    } else {\n      const e = toErrorLike(err);\n      if (e) unknownErrors.push(e);\n    }\n  }\n\n  for (const [path, errors] of Object.entries(pathErrorsMap)) {\n    print(`${pc.bold(prettifyPath(path))} - ${getErrorCount(errors.length)}\\n`);\n\n    for (const err of errors) {\n      print(err + \"\\n\");\n    }\n  }\n\n  if (unknownErrors.length) {\n    print(pc.bold(`Other ${getErrorCount(unknownErrors.length)}\\n`));\n\n    for (const err of unknownErrors) {\n      const stack = getFormattedErrorStack(err);\n\n      print(`${getFormattedErrorTitle(err)}\\n`);\n      if (stack) print(`${stack}\\n`);\n    }\n  }\n\n  return new CLIError(\"Generate failed\", {\n    output: `Generate failed (${\n      options.bail\n        ? \"Only the first error is displayed because `bail` option is enabled\"\n        : `Total ${getErrorCount(allErrors.length)}`\n    })`\n  });\n}\n","import { Config, EnvironmentConfig } from \"@kosko/config\";\nimport { spawn, SpawnError } from \"@kosko/exec-utils\";\nimport { generate, GenerateOptions, print, PrintFormat } from \"@kosko/generate\";\nimport { join } from \"node:path\";\nimport stringify from \"fast-safe-stringify\";\nimport { CLIError } from \"../../cli/error\";\nimport { setupEnv } from \"./env\";\nimport { handleGenerateError } from \"./error\";\nimport { BaseGenerateArguments } from \"./types\";\nimport { fileURLToPath } from \"node:url\";\nimport { stdout, execPath, execArgv } from \"node:process\";\nimport { createRequire } from \"node:module\";\n\nasync function doGenerate({\n  cwd,\n  ...options\n}: Omit<GenerateOptions, \"path\"> & { cwd: string }) {\n  try {\n    return await generate({\n      ...options,\n      path: join(cwd, \"components\")\n    });\n  } catch (err) {\n    throw handleGenerateError(cwd, err, options);\n  }\n}\n\nexport interface WorkerOptions {\n  printFormat?: PrintFormat;\n  args: BaseGenerateArguments;\n  config: Config & Required<EnvironmentConfig>;\n  ignoreLoaders?: boolean;\n}\n\nexport async function handler(options: WorkerOptions) {\n  const { printFormat, args, config, ignoreLoaders } = options;\n\n  if (\n    // eslint-disable-next-line no-restricted-globals\n    process.env.BUILD_TARGET === \"node\" &&\n    !ignoreLoaders &&\n    config.loaders.length\n  ) {\n    await runWithLoaders(options);\n    return;\n  }\n\n  // Setup env\n  await setupEnv(config, args);\n\n  // Require external modules\n  // eslint-disable-next-line no-restricted-globals\n  if (process.env.BUILD_TARGET === \"node\" && config.require.length) {\n    const req = createRequire(join(args.cwd, \"noop.js\"));\n\n    for (const id of config.require) {\n      req(id);\n    }\n  }\n\n  // Generate manifests\n  const result = await doGenerate({\n    cwd: args.cwd,\n    components: config.components,\n    extensions: config.extensions,\n    validate: args.validate,\n    bail: config.bail,\n    concurrency: config.concurrency\n  });\n\n  if (!result.manifests.length) {\n    throw new CLIError(\"No manifests are exported from components\", {\n      output: `No manifests are exported from components. Make sure there are exported manifests in components.`\n    });\n  }\n\n  if (printFormat) {\n    print(result, {\n      format: printFormat,\n      writer: stdout\n    });\n  }\n}\n\nasync function runWithLoaders(options: WorkerOptions) {\n  try {\n    await spawn(\n      execPath,\n      [\n        // Node.js-specific CLI options\n        ...execArgv,\n        // ESM loaders\n        ...options.config.loaders.flatMap((loader) => [\"--loader\", loader]),\n        // Entry file\n        join(\n          fileURLToPath(import.meta.url),\n          // eslint-disable-next-line no-restricted-globals\n          \"../worker-bin.\" + process.env.TARGET_SUFFIX\n        )\n      ],\n      {\n        stdio: [\"pipe\", \"inherit\", \"inherit\"],\n        input: stringify(options)\n      }\n    );\n  } catch (err) {\n    if (err instanceof SpawnError) {\n      throw new CLIError(err.message, {\n        // Omit the output because it should be directly printed to stderr by\n        // `spawn` function.\n        output: \"\",\n        code: err.exitCode\n      });\n    }\n\n    throw err;\n  }\n}\n","import logger, {\n  LogLevel,\n  logLevelFromString,\n  SilentLogWriter\n} from \"@kosko/log\";\nimport { RootArguments } from \"./command\";\n\nexport function setupLogger(args: Pick<RootArguments, \"silent\" | \"log-level\">) {\n  if (args.silent) {\n    logger.setWriter(new SilentLogWriter());\n  } else {\n    const level = args[\"log-level\"];\n\n    logger.setLevel((level && logLevelFromString(level)) || LogLevel.Info);\n  }\n}\n"],"names":["CLIError","Error","msg","output","code","prototype","name","handleError","err","logger","log","LogLevel","message","error","exit","parseRegexp","parseKeyValuePair","s","matches","match","length","key","value","parseSetOptionValue","JSON","parse","e","parseSetOptions","arg","result","argsArray","Array","isArray","argItem","argKey","Object","keys","argValues","push","componentName","createCLIEnvReducer","setOptions","opt","jp","argsOrdered","sort","a","b","reduce","target","variable","isGlobalVariable","apply","importDefault","id","mod","default","getESMEntry","cwd","pkgPath","pkgUp","pkg","readFile","module","path","join","pathToFileURL","toString","importEnvNode","envPath","resolveFrom","envs","require","env","ESM_IMPORT_DISABLED","envModUrl","dirname","setupEnv","config","args","paths","environment","setReducer","set","undefined","input","baseEnvironment","filter","Boolean","extensions","global","component","setReducers","reducers","pathErrorsMap","print","line","stderr","write","getErrorCount","n","toErrorLike","isRecord","stack","getFormattedErrorTitle","pc","red","getFormattedErrorStack","extraIndent","cleanStack","extractStack","split","map","gray","stringifyResolveError","lines","appendMeta","index","apiVersion","kind","namespace","cause","stringifyCause","ajv","validation","errors","instancePath","keyword","params","allowedValues","stringify","handleGenerateError","options","allErrors","flattenError","AggregateError","flatMap","unknownErrors","pushToPathErrorsMap","ResolveError","GenerateError","entries","bold","startsWith","substring","replace","bail","doGenerate","generate","handler","printFormat","ignoreLoaders","loaders","runWithLoaders","req","createRequire","components","validate","concurrency","manifests","format","writer","stdout","spawn","execPath","execArgv","loader","fileURLToPath","URL","__filename","href","stdio","SpawnError","exitCode","setupLogger","silent","setWriter","SilentLogWriter","level","setLevel","logLevelFromString","Info"],"mappings":"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"}
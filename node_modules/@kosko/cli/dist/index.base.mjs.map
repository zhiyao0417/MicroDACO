{"version":3,"file":"index.base.mjs","sources":["../src/cli/command.ts","../src/commands/generate/config.ts","../src/commands/generate/command.ts","../src/commands/init/isFolderEmpty.ts","../src/commands/init/install.ts","../src/commands/init/command.ts","../src/commands/validate.ts","../src/cli/print.ts","../src/commands/migrate.ts","../src/commands/root.ts","../src/index.ts"],"sourcesContent":["import { Argv, CommandModule } from \"yargs\";\n\nexport interface RootArguments {\n  cwd: string;\n  \"log-level\": string;\n  silent: boolean;\n}\n\nexport type Command<T> = CommandModule<RootArguments, T>;\n\nexport function parse(input: Argv, argv: readonly string[]): Promise<void> {\n  return new Promise((resolve, reject) => {\n    input.parse(argv, {}, (err, args, output) => {\n      if (output) {\n        console.error(output);\n      }\n\n      if (err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n}\n","import {\n  getConfig,\n  searchConfig,\n  loadConfig as loadConfigFile\n} from \"@kosko/config\";\nimport { resolve } from \"node:path\";\nimport { CLIError } from \"../../cli/error\";\nimport { BaseGenerateArguments } from \"./types\";\n\nexport async function loadConfig(args: BaseGenerateArguments) {\n  const base = args.config\n    ? await loadConfigFile(resolve(args.cwd, args.config))\n    : await searchConfig(args.cwd);\n  const envs = [base.baseEnvironment, args.env].filter(\n    (env): env is string => typeof env === \"string\"\n  );\n  const { components, require, loaders } = getConfig(base, envs);\n  const config = {\n    ...base,\n    components: args.components?.length ? args.components : components,\n    require: [...require, ...(args.require || [])],\n    loaders: [...loaders, ...(args.loader || [])],\n    bail: args.bail ?? base.bail\n  };\n\n  if (!config.components.length) {\n    throw new CLIError(\"No components are given\", {\n      output:\n        \"No components are given. Set components in a config file or in arguments.\"\n    });\n  }\n\n  return config;\n}\n","import { PrintFormat } from \"@kosko/generate\";\nimport { Argv } from \"yargs\";\nimport { Command, RootArguments } from \"../../cli/command\";\nimport { loadConfig } from \"./config\";\nimport { SetOption, parseSetOptions } from \"./set-option\";\nimport { BaseGenerateArguments, GenerateArguments } from \"./types\";\nimport { handler } from \"./worker\";\n\n/* istanbul ignore next */\nexport function generateBuilder(\n  argv: Argv<RootArguments>\n): Argv<BaseGenerateArguments> {\n  let base = argv\n    .option(\"env\", {\n      type: \"string\",\n      describe: \"Environment name\",\n      alias: \"e\"\n    })\n    .option(\"config\", {\n      type: \"string\",\n      describe: \"Config path. Default to `kosko.toml` in current folder.\",\n      alias: \"c\"\n    })\n    .option(\"bail\", {\n      type: \"boolean\",\n      describe: \"Stop immediately when an error occurred.\"\n    })\n    .option(\"set\", {\n      type: \"string\",\n      array: true,\n      describe:\n        \"Set values on the command line KEY=VAL (can be used multiple times)\",\n      alias: \"s\",\n      coerce: parseSetOptions,\n      default: [] as SetOption[]\n    })\n    .positional(\"components\", {\n      type: \"string\",\n      array: true,\n      describe:\n        \"Components to generate. This overrides components set in config file.\"\n    });\n\n  // eslint-disable-next-line no-restricted-globals\n  if (process.env.BUILD_TARGET === \"node\") {\n    base = base\n      .option(\"require\", {\n        type: \"string\",\n        array: true,\n        describe:\n          \"Require modules. Modules set in config file will also be required.\",\n        alias: \"r\"\n      })\n      .option(\"loader\", {\n        type: \"string\",\n        array: true,\n        describe:\n          \"Module loader. Loaders set in config file will also be loaded.\"\n      });\n  }\n\n  return base;\n}\n\nexport const generateCmd: Command<GenerateArguments> = {\n  command: \"generate [components..]\",\n  describe: \"Generate Kubernetes manifests\",\n  builder(argv) {\n    /* istanbul ignore next */\n    return generateBuilder(argv)\n      .option(\"output\", {\n        type: \"string\",\n        describe: \"Output format\",\n        default: PrintFormat.YAML,\n        choices: Object.values(PrintFormat),\n        alias: \"o\"\n      })\n      .option(\"validate\", {\n        type: \"boolean\",\n        describe: \"Validate components\",\n        default: true\n      })\n      .example(\"$0 generate\", \"Generate manifests\")\n      .example(\"$0 generate foo bar\", \"Specify components\")\n      .example(\"$0 generate foo_*\", \"Use glob pattern\")\n      .example(\"$0 generate --env foo\", \"Set environment\");\n  },\n  async handler(args) {\n    const config = await loadConfig(args);\n\n    await handler({\n      printFormat: args.output,\n      args,\n      config\n    });\n  }\n};\n","import { readdir } from \"node:fs/promises\";\n\n// Based on:\n// - https://github.com/github/gitignore/blob/ce6f84024931408ce801808fe9f4587f7588b283/Node.gitignore\n// - https://github.com/vercel/next.js/blob/bee8c31/packages/create-next-app/helpers/is-folder-empty.ts\nconst IGNORE_FILES: (string | RegExp)[] = [\n  \".DS_Store\",\n  \".git\",\n  \".gitattributes\",\n  \".gitignore\",\n  \".hg\",\n  \".hgcheck\",\n  \".hgignore\",\n  \".idea\",\n  \".npmignore\",\n  \"LICENSE\",\n  \"Thumbs.db\",\n  \".yarn\",\n  /\\.log$/,\n  \"node_modules\",\n  \".npm\",\n  \".cache\"\n];\n\nfunction shouldIgnoreFile(name: string): boolean {\n  return IGNORE_FILES.some((pattern) =>\n    typeof pattern === \"string\" ? name === pattern : pattern.test(name)\n  );\n}\n\nexport default async function isFolderEmpty(path: string): Promise<boolean> {\n  const files = await readdir(path);\n  const filtered = files.filter((name) => !shouldIgnoreFile(name));\n\n  return !filtered.length;\n}\n","import logger, { LogLevel } from \"@kosko/log\";\nimport { spawn } from \"@kosko/exec-utils\";\nimport { access } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport pc from \"picocolors\";\nimport { env } from \"node:process\";\n\nasync function fileExists(path: string) {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function detectPackageManager(cwd: string): Promise<string> {\n  const [isYarn, isPnpm] = await Promise.all(\n    [\"yarn.lock\", \"pnpm-lock.yaml\"].map((name) => fileExists(join(cwd, name)))\n  );\n\n  if (isYarn) return \"yarn\";\n  if (isPnpm) return \"pnpm\";\n  return \"npm\";\n}\n\nexport function getInstallCommand({\n  packageManager,\n  dependencies,\n  dev\n}: {\n  packageManager: string;\n  dependencies: string[];\n  dev?: boolean;\n}) {\n  const isYarn = packageManager === \"yarn\";\n\n  return [\n    packageManager,\n    isYarn ? \"add\" : \"install\",\n    ...dependencies,\n    ...(dev ? [isYarn ? \"--dev\" : \"--save-dev\"] : [])\n  ];\n}\n\nexport async function installDependencies({\n  cwd,\n  dependencies,\n  packageManager,\n  dev\n}: {\n  cwd: string;\n  dependencies: string[];\n  packageManager: string;\n  dev?: boolean;\n}): Promise<void> {\n  logger.log(\n    LogLevel.Info,\n    `Installing ${dev ? \"dev \" : \"\"}dependencies: ${dependencies\n      .map((x) => pc.cyan(x))\n      .join(\", \")}`\n  );\n\n  const [name, ...args] = getInstallCommand({\n    dependencies,\n    packageManager,\n    dev\n  });\n\n  await spawn(name, args, {\n    stdio: \"inherit\",\n    cwd,\n    env: {\n      ...env,\n      ADBLOCK: \"1\",\n      DISABLE_OPENCOLLECTIVE: \"1\"\n    }\n  });\n}\n","import { mkdir, stat, writeFile } from \"node:fs/promises\";\nimport { dirname, join, relative, resolve, sep } from \"node:path\";\nimport pc from \"picocolors\";\nimport { Command, RootArguments } from \"../../cli/command\";\nimport { CLIError } from \"../../cli/error\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport isFolderEmpty from \"./isFolderEmpty\";\nimport { File, Template } from \"./templates/base\";\nimport cjsTemplate from \"./templates/cjs\";\nimport tsTemplate from \"./templates/ts\";\nimport esmTemplate from \"./templates/esm\";\nimport tsEsmTemplate from \"./templates/ts-esm\";\nimport {\n  detectPackageManager,\n  getInstallCommand,\n  installDependencies\n} from \"./install\";\nimport { getErrorCode } from \"@kosko/common-utils\";\nimport denoTemplate from \"./templates/deno\";\n\nasync function checkPath(path: string, force?: boolean) {\n  try {\n    logger.log(LogLevel.Debug, `Checking stats of \"${path}\"`);\n    const stats = await stat(path);\n\n    if (!stats.isDirectory()) {\n      throw new CLIError(\"Destination already exists and is not a directory\", {\n        output:\n          \"Destination already exists and is not a directory. Please delete it or try another path.\"\n      });\n    }\n\n    if (force) {\n      return true;\n    }\n\n    if (await isFolderEmpty(path)) {\n      logger.log(LogLevel.Trace, \"Path can be initialized because it is empty\");\n      return;\n    }\n\n    throw new CLIError(\"Destination already exists\", {\n      output: `Destination already exists. Please empty the directory or rerun with \"--force\" to proceed.`\n    });\n  } catch (err) {\n    if (getErrorCode(err) !== \"ENOENT\") throw err;\n\n    logger.log(\n      LogLevel.Trace,\n      \"Path can be initialized because it does not exist yet\"\n    );\n  }\n}\n\nasync function writeFiles(path: string, files: readonly File[]) {\n  for (const file of files) {\n    const filePath = join(path, file.path);\n\n    logger.log(LogLevel.Debug, `Writing file: \"${file.path}\"`);\n    await mkdir(dirname(filePath), { recursive: true });\n    await writeFile(filePath, file.content);\n  }\n}\n\nfunction getCDPath(cwd: string, path: string): string | undefined {\n  if (cwd === path) return;\n\n  if (path.startsWith(cwd + sep)) {\n    return relative(cwd, path);\n  }\n\n  return path;\n}\n\nexport interface InitArguments extends RootArguments {\n  force?: boolean;\n  path?: string;\n  typescript?: boolean;\n  esm?: boolean;\n  install?: boolean;\n  packageManager?: string;\n}\n\nexport const initCmd: Command<InitArguments> = {\n  command: \"init [path]\",\n  describe: \"Set up a new Kosko directory\",\n  builder(argv) {\n    /* istanbul ignore next */\n    let base = argv\n      .option(\"force\", {\n        type: \"boolean\",\n        describe: \"Overwrite existing files\",\n        alias: \"f\"\n      })\n      .positional(\"path\", { type: \"string\", describe: \"Path to initialize\" })\n      .example(\"$0 init\", \"Initialize in current directory\")\n      .example(\"$0 init example\", \"Initialize in specified directory\");\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\") {\n      base = base\n        .option(\"typescript\", {\n          type: \"boolean\",\n          describe: \"Generate TypeScript files\",\n          alias: \"ts\"\n        })\n        .option(\"esm\", {\n          type: \"boolean\",\n          describe: \"Generate ECMAScript module (ESM) files\"\n        })\n        .option(\"install\", {\n          type: \"boolean\",\n          describe: \"Install dependencies automatically\",\n          default: true\n        })\n        .option(\"package-manager\", {\n          type: \"string\",\n          describe: \"Package manager (npm, yarn, pnpm)\",\n          alias: \"pm\"\n        })\n        .example(\"$0 init --typescript\", \"Setup a TypeScript project\");\n    }\n\n    return base;\n  },\n  async handler(args) {\n    const path = args.path ? resolve(args.cwd, args.path) : args.cwd;\n\n    await checkPath(path, args.force);\n\n    logger.log(LogLevel.Info, `Creating a Kosko project in \"${path}\"`);\n    const template: Template = (() => {\n      // eslint-disable-next-line no-restricted-globals\n      switch (process.env.BUILD_TARGET) {\n        case \"deno\":\n          return denoTemplate;\n\n        case \"node\":\n          if (args.typescript) {\n            return args.esm ? tsEsmTemplate : tsTemplate;\n          }\n\n          if (args.esm) {\n            return esmTemplate;\n          }\n\n          return cjsTemplate;\n      }\n\n      throw new Error(\"Template is unavailable on current platform\");\n    })();\n\n    const packageManager =\n      args.packageManager ?? (await detectPackageManager(path));\n    const runCmd =\n      // eslint-disable-next-line no-restricted-globals\n      process.env.BUILD_TARGET === \"deno\"\n        ? \"deno task kosko\"\n        : `${packageManager} run`;\n    const { dependencies, devDependencies, files } = await template({ path });\n\n    await writeFiles(path, files);\n\n    const cdPath = getCDPath(args.cwd, path);\n    let installSuccessful = false;\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\" && args.install) {\n      try {\n        if (dependencies?.length) {\n          await installDependencies({\n            cwd: path,\n            packageManager,\n            dependencies\n          });\n        }\n\n        if (devDependencies?.length) {\n          await installDependencies({\n            cwd: path,\n            packageManager,\n            dependencies: devDependencies,\n            dev: true\n          });\n        }\n\n        installSuccessful = true;\n      } catch (err) {\n        logger.log(LogLevel.Warn, \"Install failed\", { error: err });\n      }\n    }\n\n    logger.log(\n      LogLevel.Info,\n      `Project created at \"${path}\"\n\nInside that directory, you can run several commands:\n${[\n  [\n    `${runCmd} generate`,\n    \"Validate components and generate Kubernetes manifests.\"\n  ],\n  [`${runCmd} validate`, \"Only validate components.\"]\n]\n  .map(([cmd, desc]) => `\\n  ${pc.cyan(cmd)}\\n    ${desc}`)\n  .join(\"\\n\")}\n\nWe suggest that you begin by typing:\n\n${[\n  ...(cdPath ? [`cd ${cdPath}`] : []),\n  // eslint-disable-next-line no-restricted-globals\n  ...(process.env.BUILD_TARGET !== \"node\" || (args.install && installSuccessful)\n    ? []\n    : [\n        dependencies?.length\n          ? getInstallCommand({ packageManager, dependencies }).join(\" \")\n          : \"\",\n        devDependencies?.length\n          ? getInstallCommand({\n              packageManager,\n              dependencies: devDependencies,\n              dev: true\n            }).join(\" \")\n          : \"\"\n      ]),\n  `${runCmd} generate`\n]\n  .filter(Boolean)\n  .map((line) => `  ${pc.cyan(line)}`)\n  .join(\"\\n\")}`\n    );\n  }\n};\n","import { Command } from \"../cli/command\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { handler } from \"./generate/worker\";\nimport { BaseGenerateArguments } from \"./generate/types\";\nimport { generateBuilder } from \"./generate/command\";\nimport { loadConfig } from \"./generate/config\";\n\nexport type ValidateArguments = BaseGenerateArguments;\n\nexport const validateCmd: Command<ValidateArguments> = {\n  command: \"validate [components..]\",\n  describe: \"Validate components\",\n  builder(argv) {\n    /* istanbul ignore next */\n    return generateBuilder(argv)\n      .example(\"$0 validate\", \"Validate components\")\n      .example(\"$0 validate foo bar\", \"Specify components\")\n      .example(\"$0 validate foo_*\", \"Use glob syntax\");\n  },\n  async handler(args) {\n    const config = await loadConfig(args);\n\n    await handler({\n      args: { ...args, validate: true },\n      config\n    });\n\n    logger.log(LogLevel.Info, \"Components are valid\");\n  }\n};\n","import { stdout } from \"node:process\";\n\nexport function print(data: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    stdout.write(data, (err: any) => {\n      if (err) return reject(err);\n      resolve();\n    });\n  });\n}\n","import { MigrateFormat, migrateString } from \"@kosko/migrate\";\nimport { readdir, readFile, stat } from \"node:fs/promises\";\nimport getStdin from \"get-stdin\";\nimport { join, resolve } from \"node:path\";\nimport { Command, RootArguments } from \"../cli/command\";\nimport { print } from \"../cli/print\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { toArray } from \"@kosko/common-utils\";\n\nfunction concatFiles(arr: readonly string[]): string {\n  if (!arr.length) return \"\";\n  let output = \"\";\n\n  for (const s of arr) {\n    if (!s.startsWith(\"---\")) output += \"---\\n\";\n    output += s + \"\\n\";\n  }\n\n  return output;\n}\n\nfunction readFileString(path: string): Promise<string> {\n  logger.log(LogLevel.Debug, `Reading file \"${path}\"`);\n  return readFile(path, \"utf8\");\n}\n\nasync function readFilesInDir(dir: string): Promise<string> {\n  logger.log(LogLevel.Debug, `Reading directory \"${dir}\"`);\n\n  const files = await readdir(dir);\n  const contents = await Promise.all(\n    files.map((file) => readFileString(join(dir, file)))\n  );\n\n  return concatFiles(contents);\n}\n\nfunction readFiles(cwd: string, files: readonly string[]): Promise<string[]> {\n  return Promise.all(\n    files.map(async (file) => {\n      if (file === \"-\") {\n        logger.log(LogLevel.Debug, \"Reading from stdin\");\n        return getStdin();\n      }\n\n      const path = resolve(cwd, file);\n      const stats = await stat(path);\n\n      return stats.isDirectory() ? readFilesInDir(path) : readFileString(path);\n    })\n  );\n}\n\nexport interface MigrateArguments extends RootArguments {\n  filename: string | string[];\n  esm?: boolean;\n}\n\nexport const migrateCmd: Command<MigrateArguments> = {\n  command: \"migrate\",\n  describe: \"Migrate YAML into components\",\n  builder(argv) {\n    /* istanbul ignore next */\n    let base = argv\n      // HACK: Don't set the type of filename option to \"array\" because yargs\n      // can't parse `migrate -f -` properly.\n      // Link: https://github.com/tommy351/kosko/issues/17\n      .option(\"filename\", {\n        type: \"string\",\n        describe: \"File, directory to migrate\",\n        required: true,\n        alias: \"f\"\n      })\n      .example(\"$0 migrate -f path/to/file\", \"Read from the path\")\n      .example(\"$0 migrate -f -\", \"Read from stdin\");\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\") {\n      base = base.option(\"esm\", {\n        type: \"boolean\",\n        describe: \"Generate ECMAScript module (ESM) files\"\n      });\n    }\n\n    return base;\n  },\n  async handler(args) {\n    const file = concatFiles(await readFiles(args.cwd, toArray(args.filename)));\n    const content = await migrateString(file, {\n      ...(args.esm && { format: MigrateFormat.ESM })\n    });\n\n    await print(content);\n  }\n};\n","import { isAbsolute, resolve } from \"node:path\";\nimport yargs from \"yargs\";\nimport { generateCmd } from \"./generate/command\";\nimport { initCmd } from \"./init/command\";\nimport { validateCmd } from \"./validate\";\nimport { migrateCmd } from \"./migrate\";\nimport { setupLogger } from \"../cli/logger\";\nimport { cwd } from \"node:process\";\nimport { version } from \"../../package.json\";\n\nexport function createRootCommand(args: readonly string[]) {\n  return yargs(args)\n    .scriptName(\"kosko\")\n    .version(version)\n    .exitProcess(false)\n    .option(\"cwd\", {\n      type: \"string\",\n      describe: \"Path of working directory\",\n      global: true,\n      default: cwd(),\n      defaultDescription: \"CWD\",\n      coerce(arg) {\n        return isAbsolute(arg) ? arg : resolve(arg);\n      }\n    })\n    .option(\"log-level\", {\n      type: \"string\",\n      describe: \"Set log level\",\n      global: true,\n      default: \"info\"\n    })\n    .option(\"silent\", {\n      type: \"boolean\",\n      describe: \"Disable log output\",\n      global: true,\n      default: false\n    })\n    .group([\"cwd\", \"log-level\", \"silent\", \"help\", \"version\"], \"Global Options:\")\n    .middleware(setupLogger)\n    .command(initCmd)\n    .command(generateCmd)\n    .command(validateCmd)\n    .command(migrateCmd)\n    .demandCommand();\n}\n","/**\n * CLI.\n *\n * @packageDocumentation\n */\n\nimport { parse } from \"./cli/command\";\nimport { createRootCommand } from \"./commands/root\";\nimport { argv } from \"node:process\";\n\nexport { handleError } from \"./cli/error\";\n\n/**\n * Runs CLI with the given arguments.\n *\n * @public\n */\nexport async function run(\n  args: readonly string[] = argv.slice(2)\n): Promise<void> {\n  await parse(createRootCommand(args), args);\n}\n"],"names":["parse","input","argv","Promise","resolve","reject","err","args","output","console","error","loadConfig","base","config","loadConfigFile","cwd","searchConfig","envs","baseEnvironment","env","filter","components","require","loaders","getConfig","length","loader","bail","CLIError","generateBuilder","option","type","describe","alias","array","coerce","parseSetOptions","default","positional","generateCmd","command","builder","PrintFormat","YAML","choices","Object","values","example","handler","printFormat","IGNORE_FILES","isFolderEmpty","path","files","readdir","filtered","name","some","pattern","test","fileExists","access","detectPackageManager","isYarn","isPnpm","all","map","join","checkPath","force","logger","log","LogLevel","Debug","stats","stat","isDirectory","Trace","getErrorCode","writeFiles","file","filePath","mkdir","dirname","recursive","writeFile","content","initCmd","Info","template","Error","packageManager","runCmd","dependencies","devDependencies","cdPath","getCDPath","startsWith","sep","relative","cmd","desc","pc","cyan","Boolean","line","validateCmd","validate","print","data","stdout","write","concatFiles","arr","s","readFileString","readFile","readFilesInDir","dir","contents","migrateCmd","required","toArray","filename","getStdin","migrateString","esm","format","MigrateFormat","ESM","createRootCommand","yargs","scriptName","version","exitProcess","global","defaultDescription","arg","isAbsolute","group","middleware","setupLogger","demandCommand","run","slice"],"mappings":"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"}
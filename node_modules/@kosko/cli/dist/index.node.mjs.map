{"version":3,"file":"index.node.mjs","sources":["../src/cli/command.ts","../src/commands/generate/config.ts","../src/commands/generate/command.ts","../src/commands/init/isFolderEmpty.ts","../src/commands/init/templates/kosko-config.ts","../src/commands/init/templates/package-json.ts","../src/commands/init/templates/template.ts","../src/commands/init/templates/cjs.ts","../src/commands/init/templates/ts.ts","../src/commands/init/templates/esm.ts","../src/commands/init/templates/ts-esm.ts","../src/commands/init/install.ts","../src/commands/init/command.ts","../src/commands/validate.ts","../src/cli/print.ts","../src/commands/migrate.ts","../src/commands/root.ts","../src/index.ts"],"sourcesContent":["import { Argv, CommandModule } from \"yargs\";\n\nexport interface RootArguments {\n  cwd: string;\n  \"log-level\": string;\n  silent: boolean;\n}\n\nexport type Command<T> = CommandModule<RootArguments, T>;\n\nexport function parse(input: Argv, argv: readonly string[]): Promise<void> {\n  return new Promise((resolve, reject) => {\n    input.parse(argv, {}, (err, args, output) => {\n      if (output) {\n        console.error(output);\n      }\n\n      if (err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n}\n","import {\n  getConfig,\n  searchConfig,\n  loadConfig as loadConfigFile\n} from \"@kosko/config\";\nimport { resolve } from \"node:path\";\nimport { CLIError } from \"../../cli/error\";\nimport { BaseGenerateArguments } from \"./types\";\n\nexport async function loadConfig(args: BaseGenerateArguments) {\n  const base = args.config\n    ? await loadConfigFile(resolve(args.cwd, args.config))\n    : await searchConfig(args.cwd);\n  const envs = [base.baseEnvironment, args.env].filter(\n    (env): env is string => typeof env === \"string\"\n  );\n  const { components, require, loaders } = getConfig(base, envs);\n  const config = {\n    ...base,\n    components: args.components?.length ? args.components : components,\n    require: [...require, ...(args.require || [])],\n    loaders: [...loaders, ...(args.loader || [])],\n    bail: args.bail ?? base.bail\n  };\n\n  if (!config.components.length) {\n    throw new CLIError(\"No components are given\", {\n      output:\n        \"No components are given. Set components in a config file or in arguments.\"\n    });\n  }\n\n  return config;\n}\n","import { PrintFormat } from \"@kosko/generate\";\nimport { Argv } from \"yargs\";\nimport { Command, RootArguments } from \"../../cli/command\";\nimport { loadConfig } from \"./config\";\nimport { SetOption, parseSetOptions } from \"./set-option\";\nimport { BaseGenerateArguments, GenerateArguments } from \"./types\";\nimport { handler } from \"./worker\";\n\n/* istanbul ignore next */\nexport function generateBuilder(\n  argv: Argv<RootArguments>\n): Argv<BaseGenerateArguments> {\n  let base = argv\n    .option(\"env\", {\n      type: \"string\",\n      describe: \"Environment name\",\n      alias: \"e\"\n    })\n    .option(\"config\", {\n      type: \"string\",\n      describe: \"Config path. Default to `kosko.toml` in current folder.\",\n      alias: \"c\"\n    })\n    .option(\"bail\", {\n      type: \"boolean\",\n      describe: \"Stop immediately when an error occurred.\"\n    })\n    .option(\"set\", {\n      type: \"string\",\n      array: true,\n      describe:\n        \"Set values on the command line KEY=VAL (can be used multiple times)\",\n      alias: \"s\",\n      coerce: parseSetOptions,\n      default: [] as SetOption[]\n    })\n    .positional(\"components\", {\n      type: \"string\",\n      array: true,\n      describe:\n        \"Components to generate. This overrides components set in config file.\"\n    });\n\n  // eslint-disable-next-line no-restricted-globals\n  if (process.env.BUILD_TARGET === \"node\") {\n    base = base\n      .option(\"require\", {\n        type: \"string\",\n        array: true,\n        describe:\n          \"Require modules. Modules set in config file will also be required.\",\n        alias: \"r\"\n      })\n      .option(\"loader\", {\n        type: \"string\",\n        array: true,\n        describe:\n          \"Module loader. Loaders set in config file will also be loaded.\"\n      });\n  }\n\n  return base;\n}\n\nexport const generateCmd: Command<GenerateArguments> = {\n  command: \"generate [components..]\",\n  describe: \"Generate Kubernetes manifests\",\n  builder(argv) {\n    /* istanbul ignore next */\n    return generateBuilder(argv)\n      .option(\"output\", {\n        type: \"string\",\n        describe: \"Output format\",\n        default: PrintFormat.YAML,\n        choices: Object.values(PrintFormat),\n        alias: \"o\"\n      })\n      .option(\"validate\", {\n        type: \"boolean\",\n        describe: \"Validate components\",\n        default: true\n      })\n      .example(\"$0 generate\", \"Generate manifests\")\n      .example(\"$0 generate foo bar\", \"Specify components\")\n      .example(\"$0 generate foo_*\", \"Use glob pattern\")\n      .example(\"$0 generate --env foo\", \"Set environment\");\n  },\n  async handler(args) {\n    const config = await loadConfig(args);\n\n    await handler({\n      printFormat: args.output,\n      args,\n      config\n    });\n  }\n};\n","import { readdir } from \"node:fs/promises\";\n\n// Based on:\n// - https://github.com/github/gitignore/blob/ce6f84024931408ce801808fe9f4587f7588b283/Node.gitignore\n// - https://github.com/vercel/next.js/blob/bee8c31/packages/create-next-app/helpers/is-folder-empty.ts\nconst IGNORE_FILES: (string | RegExp)[] = [\n  \".DS_Store\",\n  \".git\",\n  \".gitattributes\",\n  \".gitignore\",\n  \".hg\",\n  \".hgcheck\",\n  \".hgignore\",\n  \".idea\",\n  \".npmignore\",\n  \"LICENSE\",\n  \"Thumbs.db\",\n  \".yarn\",\n  /\\.log$/,\n  \"node_modules\",\n  \".npm\",\n  \".cache\"\n];\n\nfunction shouldIgnoreFile(name: string): boolean {\n  return IGNORE_FILES.some((pattern) =>\n    typeof pattern === \"string\" ? name === pattern : pattern.test(name)\n  );\n}\n\nexport default async function isFolderEmpty(path: string): Promise<boolean> {\n  const files = await readdir(path);\n  const filtered = files.filter((name) => !shouldIgnoreFile(name));\n\n  return !filtered.length;\n}\n","import { EOL } from \"node:os\";\nimport { File } from \"./base\";\n\nexport function generateKoskoConfig(additionalConfig?: string): File {\n  return {\n    path: \"kosko.toml\",\n    content:\n      [\n        `components = [\"*\"]`,\n        ...(additionalConfig ? [additionalConfig] : [])\n      ].join(EOL) + EOL\n  };\n}\n","import logger, { LogLevel } from \"@kosko/log\";\nimport { join } from \"node:path\";\nimport { readFile } from \"node:fs/promises\";\nimport stringify from \"fast-safe-stringify\";\nimport { EOL } from \"node:os\";\nimport { File, TemplateContext } from \"./base\";\nimport { getErrorCode } from \"@kosko/common-utils\";\n\nasync function readJson(path: string): Promise<any> {\n  try {\n    const content = await readFile(path, \"utf8\");\n    return JSON.parse(content);\n  } catch (err) {\n    if (getErrorCode(err) !== \"ENOENT\") throw err;\n    return {};\n  }\n}\n\nexport async function generatePackageJson(\n  ctx: TemplateContext,\n  data: Record<string, any> = {}\n): Promise<File> {\n  const path = join(ctx.path, \"package.json\");\n\n  logger.log(LogLevel.Debug, `Reading existing package.json from \"${path}\"`);\n  const base = await readJson(path);\n\n  return {\n    path: \"package.json\",\n    content:\n      stringify(\n        {\n          ...base,\n          ...data,\n          scripts: {\n            ...base.scripts,\n            generate: \"kosko generate\",\n            validate: \"kosko validate\",\n            ...data.scripts\n          }\n        },\n        undefined,\n        \"  \"\n      ) + EOL\n  };\n}\n","import { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { File } from \"./base\";\n\nconst TEMPLATE_DIR = join(\n  fileURLToPath(import.meta.url),\n  // eslint-disable-next-line no-restricted-globals\n  process.env.BUILD_PROD ? \"../../templates\" : \"../../../../../templates\"\n);\n\nexport async function generateFromTemplateFile(\n  path: string,\n  template = path\n): Promise<File> {\n  return {\n    path,\n    content: await readFile(join(TEMPLATE_DIR, template), \"utf8\")\n  };\n}\n\nexport function generateReadme() {\n  return generateFromTemplateFile(\"README.md\");\n}\n","import { Template } from \"./base\";\nimport { generateKoskoConfig } from \"./kosko-config\";\nimport { generatePackageJson } from \"./package-json\";\nimport { generateFromTemplateFile, generateReadme } from \"./template\";\n\nconst TEMPLATE_FILES = [\n  \"components/nginx\",\n  \"environments/dev/index\",\n  \"environments/dev/nginx\"\n];\n\nexport const baseDependencies = [\"@kosko/env\", \"kosko\", \"kubernetes-models\"];\n\nconst cjsTemplate: Template = async (ctx) => {\n  return {\n    dependencies: baseDependencies,\n    files: [\n      await generatePackageJson(ctx),\n      generateKoskoConfig(),\n      await generateReadme(),\n      ...(await Promise.all(\n        TEMPLATE_FILES.map((file) =>\n          generateFromTemplateFile(`${file}.js`, `cjs/${file}.js`)\n        )\n      ))\n    ]\n  };\n};\n\nexport default cjsTemplate;\n","import stringify from \"fast-safe-stringify\";\nimport { EOL } from \"node:os\";\nimport { File, Template } from \"./base\";\nimport { baseDependencies } from \"./cjs\";\nimport { generateKoskoConfig } from \"./kosko-config\";\nimport { generatePackageJson } from \"./package-json\";\nimport { generateFromTemplateFile, generateReadme } from \"./template\";\n\nconst BASE_TSCONFIG = \"@tsconfig/node14\";\n\nexport const tsDevDependencies = [\"ts-node\", \"typescript\", BASE_TSCONFIG];\n\nexport function generateTsConfig({\n  compilerOptions,\n  ...data\n}: {\n  compilerOptions?: Record<string, unknown>;\n  extends?: string;\n  [key: string]: unknown;\n} = {}): File {\n  return {\n    path: \"tsconfig.json\",\n    content:\n      stringify(\n        {\n          extends: `${BASE_TSCONFIG}/tsconfig.json`,\n          compilerOptions: {\n            typeRoots: [\"./node_modules/@types\", \"./typings\"],\n            ...compilerOptions\n          },\n          ...data\n        },\n        undefined,\n        \"  \"\n      ) + EOL\n  };\n}\n\nexport function generateTsEnvFiles() {\n  return Promise.all([\n    generateFromTemplateFile(\n      \"environments/dev/index.ts\",\n      \"ts/environments/dev/index.ts\"\n    ),\n    generateFromTemplateFile(\n      \"environments/dev/nginx.ts\",\n      \"ts/environments/dev/nginx.ts\"\n    )\n  ]);\n}\n\nconst tsTemplate: Template = async (ctx) => {\n  return {\n    dependencies: baseDependencies,\n    devDependencies: tsDevDependencies,\n    files: [\n      await generatePackageJson(ctx),\n      generateKoskoConfig(`require = [\"ts-node/register\"]`),\n      await generateReadme(),\n      generateTsConfig(),\n      await generateFromTemplateFile(\n        \"components/nginx.ts\",\n        \"ts/components/nginx.ts\"\n      ),\n      ...(await generateTsEnvFiles()),\n      await generateFromTemplateFile(\n        \"typings/@kosko__env/index.d.ts\",\n        \"ts/typings/kosko-env.d.cts\"\n      )\n    ]\n  };\n};\n\nexport default tsTemplate;\n","import { Template } from \"./base\";\nimport { baseDependencies } from \"./cjs\";\nimport { generateKoskoConfig } from \"./kosko-config\";\nimport { generatePackageJson } from \"./package-json\";\nimport { generateFromTemplateFile, generateReadme } from \"./template\";\n\nconst TEMPLATE_FILES = [\n  \"components/nginx\",\n  \"environments/dev/index\",\n  \"environments/dev/nginx\"\n];\n\nconst esmTemplate: Template = async (ctx) => {\n  return {\n    dependencies: baseDependencies,\n    files: [\n      await generatePackageJson(ctx, {\n        type: \"module\"\n      }),\n      generateKoskoConfig(),\n      await generateReadme(),\n      ...(await Promise.all(\n        TEMPLATE_FILES.map((file) =>\n          generateFromTemplateFile(`${file}.js`, `esm/${file}.js`)\n        )\n      ))\n    ]\n  };\n};\n\nexport default esmTemplate;\n","import { Template } from \"./base\";\nimport { baseDependencies } from \"./cjs\";\nimport { generateKoskoConfig } from \"./kosko-config\";\nimport { generatePackageJson } from \"./package-json\";\nimport { generateFromTemplateFile, generateReadme } from \"./template\";\nimport { generateTsConfig, generateTsEnvFiles, tsDevDependencies } from \"./ts\";\nimport { getRequireExtensions } from \"@kosko/require\";\n\nconst tsEsmTemplate: Template = async (ctx) => {\n  const extensions = [\n    \"ts\",\n    \"mts\",\n    ...getRequireExtensions().map((x) => x.substring(1))\n  ]\n    .map((x) => `\"${x}\"`)\n    .join(\", \");\n\n  return {\n    dependencies: baseDependencies,\n    devDependencies: tsDevDependencies,\n    files: [\n      await generatePackageJson(ctx, {\n        type: \"module\"\n      }),\n      generateKoskoConfig(`loaders = [\"ts-node/esm\"]\nextensions = [${extensions}]`),\n      await generateReadme(),\n      generateTsConfig({\n        compilerOptions: {\n          module: \"nodenext\",\n          moduleResolution: \"nodenext\"\n        }\n      }),\n      await generateFromTemplateFile(\n        \"components/nginx.ts\",\n        \"esm/components/nginx.js\"\n      ),\n      ...(await generateTsEnvFiles()),\n      await generateFromTemplateFile(\n        \"typings/@kosko__env/index.d.ts\",\n        \"ts/typings/kosko-env.d.mts\"\n      )\n    ]\n  };\n};\n\nexport default tsEsmTemplate;\n","import logger, { LogLevel } from \"@kosko/log\";\nimport { spawn } from \"@kosko/exec-utils\";\nimport { access } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport pc from \"picocolors\";\nimport { env } from \"node:process\";\n\nasync function fileExists(path: string) {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function detectPackageManager(cwd: string): Promise<string> {\n  const [isYarn, isPnpm] = await Promise.all(\n    [\"yarn.lock\", \"pnpm-lock.yaml\"].map((name) => fileExists(join(cwd, name)))\n  );\n\n  if (isYarn) return \"yarn\";\n  if (isPnpm) return \"pnpm\";\n  return \"npm\";\n}\n\nexport function getInstallCommand({\n  packageManager,\n  dependencies,\n  dev\n}: {\n  packageManager: string;\n  dependencies: string[];\n  dev?: boolean;\n}) {\n  const isYarn = packageManager === \"yarn\";\n\n  return [\n    packageManager,\n    isYarn ? \"add\" : \"install\",\n    ...dependencies,\n    ...(dev ? [isYarn ? \"--dev\" : \"--save-dev\"] : [])\n  ];\n}\n\nexport async function installDependencies({\n  cwd,\n  dependencies,\n  packageManager,\n  dev\n}: {\n  cwd: string;\n  dependencies: string[];\n  packageManager: string;\n  dev?: boolean;\n}): Promise<void> {\n  logger.log(\n    LogLevel.Info,\n    `Installing ${dev ? \"dev \" : \"\"}dependencies: ${dependencies\n      .map((x) => pc.cyan(x))\n      .join(\", \")}`\n  );\n\n  const [name, ...args] = getInstallCommand({\n    dependencies,\n    packageManager,\n    dev\n  });\n\n  await spawn(name, args, {\n    stdio: \"inherit\",\n    cwd,\n    env: {\n      ...env,\n      ADBLOCK: \"1\",\n      DISABLE_OPENCOLLECTIVE: \"1\"\n    }\n  });\n}\n","import { mkdir, stat, writeFile } from \"node:fs/promises\";\nimport { dirname, join, relative, resolve, sep } from \"node:path\";\nimport pc from \"picocolors\";\nimport { Command, RootArguments } from \"../../cli/command\";\nimport { CLIError } from \"../../cli/error\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport isFolderEmpty from \"./isFolderEmpty\";\nimport { File, Template } from \"./templates/base\";\nimport cjsTemplate from \"./templates/cjs\";\nimport tsTemplate from \"./templates/ts\";\nimport esmTemplate from \"./templates/esm\";\nimport tsEsmTemplate from \"./templates/ts-esm\";\nimport {\n  detectPackageManager,\n  getInstallCommand,\n  installDependencies\n} from \"./install\";\nimport { getErrorCode } from \"@kosko/common-utils\";\nimport denoTemplate from \"./templates/deno\";\n\nasync function checkPath(path: string, force?: boolean) {\n  try {\n    logger.log(LogLevel.Debug, `Checking stats of \"${path}\"`);\n    const stats = await stat(path);\n\n    if (!stats.isDirectory()) {\n      throw new CLIError(\"Destination already exists and is not a directory\", {\n        output:\n          \"Destination already exists and is not a directory. Please delete it or try another path.\"\n      });\n    }\n\n    if (force) {\n      return true;\n    }\n\n    if (await isFolderEmpty(path)) {\n      logger.log(LogLevel.Trace, \"Path can be initialized because it is empty\");\n      return;\n    }\n\n    throw new CLIError(\"Destination already exists\", {\n      output: `Destination already exists. Please empty the directory or rerun with \"--force\" to proceed.`\n    });\n  } catch (err) {\n    if (getErrorCode(err) !== \"ENOENT\") throw err;\n\n    logger.log(\n      LogLevel.Trace,\n      \"Path can be initialized because it does not exist yet\"\n    );\n  }\n}\n\nasync function writeFiles(path: string, files: readonly File[]) {\n  for (const file of files) {\n    const filePath = join(path, file.path);\n\n    logger.log(LogLevel.Debug, `Writing file: \"${file.path}\"`);\n    await mkdir(dirname(filePath), { recursive: true });\n    await writeFile(filePath, file.content);\n  }\n}\n\nfunction getCDPath(cwd: string, path: string): string | undefined {\n  if (cwd === path) return;\n\n  if (path.startsWith(cwd + sep)) {\n    return relative(cwd, path);\n  }\n\n  return path;\n}\n\nexport interface InitArguments extends RootArguments {\n  force?: boolean;\n  path?: string;\n  typescript?: boolean;\n  esm?: boolean;\n  install?: boolean;\n  packageManager?: string;\n}\n\nexport const initCmd: Command<InitArguments> = {\n  command: \"init [path]\",\n  describe: \"Set up a new Kosko directory\",\n  builder(argv) {\n    /* istanbul ignore next */\n    let base = argv\n      .option(\"force\", {\n        type: \"boolean\",\n        describe: \"Overwrite existing files\",\n        alias: \"f\"\n      })\n      .positional(\"path\", { type: \"string\", describe: \"Path to initialize\" })\n      .example(\"$0 init\", \"Initialize in current directory\")\n      .example(\"$0 init example\", \"Initialize in specified directory\");\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\") {\n      base = base\n        .option(\"typescript\", {\n          type: \"boolean\",\n          describe: \"Generate TypeScript files\",\n          alias: \"ts\"\n        })\n        .option(\"esm\", {\n          type: \"boolean\",\n          describe: \"Generate ECMAScript module (ESM) files\"\n        })\n        .option(\"install\", {\n          type: \"boolean\",\n          describe: \"Install dependencies automatically\",\n          default: true\n        })\n        .option(\"package-manager\", {\n          type: \"string\",\n          describe: \"Package manager (npm, yarn, pnpm)\",\n          alias: \"pm\"\n        })\n        .example(\"$0 init --typescript\", \"Setup a TypeScript project\");\n    }\n\n    return base;\n  },\n  async handler(args) {\n    const path = args.path ? resolve(args.cwd, args.path) : args.cwd;\n\n    await checkPath(path, args.force);\n\n    logger.log(LogLevel.Info, `Creating a Kosko project in \"${path}\"`);\n    const template: Template = (() => {\n      // eslint-disable-next-line no-restricted-globals\n      switch (process.env.BUILD_TARGET) {\n        case \"deno\":\n          return denoTemplate;\n\n        case \"node\":\n          if (args.typescript) {\n            return args.esm ? tsEsmTemplate : tsTemplate;\n          }\n\n          if (args.esm) {\n            return esmTemplate;\n          }\n\n          return cjsTemplate;\n      }\n\n      throw new Error(\"Template is unavailable on current platform\");\n    })();\n\n    const packageManager =\n      args.packageManager ?? (await detectPackageManager(path));\n    const runCmd =\n      // eslint-disable-next-line no-restricted-globals\n      process.env.BUILD_TARGET === \"deno\"\n        ? \"deno task kosko\"\n        : `${packageManager} run`;\n    const { dependencies, devDependencies, files } = await template({ path });\n\n    await writeFiles(path, files);\n\n    const cdPath = getCDPath(args.cwd, path);\n    let installSuccessful = false;\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\" && args.install) {\n      try {\n        if (dependencies?.length) {\n          await installDependencies({\n            cwd: path,\n            packageManager,\n            dependencies\n          });\n        }\n\n        if (devDependencies?.length) {\n          await installDependencies({\n            cwd: path,\n            packageManager,\n            dependencies: devDependencies,\n            dev: true\n          });\n        }\n\n        installSuccessful = true;\n      } catch (err) {\n        logger.log(LogLevel.Warn, \"Install failed\", { error: err });\n      }\n    }\n\n    logger.log(\n      LogLevel.Info,\n      `Project created at \"${path}\"\n\nInside that directory, you can run several commands:\n${[\n  [\n    `${runCmd} generate`,\n    \"Validate components and generate Kubernetes manifests.\"\n  ],\n  [`${runCmd} validate`, \"Only validate components.\"]\n]\n  .map(([cmd, desc]) => `\\n  ${pc.cyan(cmd)}\\n    ${desc}`)\n  .join(\"\\n\")}\n\nWe suggest that you begin by typing:\n\n${[\n  ...(cdPath ? [`cd ${cdPath}`] : []),\n  // eslint-disable-next-line no-restricted-globals\n  ...(process.env.BUILD_TARGET !== \"node\" || (args.install && installSuccessful)\n    ? []\n    : [\n        dependencies?.length\n          ? getInstallCommand({ packageManager, dependencies }).join(\" \")\n          : \"\",\n        devDependencies?.length\n          ? getInstallCommand({\n              packageManager,\n              dependencies: devDependencies,\n              dev: true\n            }).join(\" \")\n          : \"\"\n      ]),\n  `${runCmd} generate`\n]\n  .filter(Boolean)\n  .map((line) => `  ${pc.cyan(line)}`)\n  .join(\"\\n\")}`\n    );\n  }\n};\n","import { Command } from \"../cli/command\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { handler } from \"./generate/worker\";\nimport { BaseGenerateArguments } from \"./generate/types\";\nimport { generateBuilder } from \"./generate/command\";\nimport { loadConfig } from \"./generate/config\";\n\nexport type ValidateArguments = BaseGenerateArguments;\n\nexport const validateCmd: Command<ValidateArguments> = {\n  command: \"validate [components..]\",\n  describe: \"Validate components\",\n  builder(argv) {\n    /* istanbul ignore next */\n    return generateBuilder(argv)\n      .example(\"$0 validate\", \"Validate components\")\n      .example(\"$0 validate foo bar\", \"Specify components\")\n      .example(\"$0 validate foo_*\", \"Use glob syntax\");\n  },\n  async handler(args) {\n    const config = await loadConfig(args);\n\n    await handler({\n      args: { ...args, validate: true },\n      config\n    });\n\n    logger.log(LogLevel.Info, \"Components are valid\");\n  }\n};\n","import { stdout } from \"node:process\";\n\nexport function print(data: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    stdout.write(data, (err: any) => {\n      if (err) return reject(err);\n      resolve();\n    });\n  });\n}\n","import { MigrateFormat, migrateString } from \"@kosko/migrate\";\nimport { readdir, readFile, stat } from \"node:fs/promises\";\nimport getStdin from \"get-stdin\";\nimport { join, resolve } from \"node:path\";\nimport { Command, RootArguments } from \"../cli/command\";\nimport { print } from \"../cli/print\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { toArray } from \"@kosko/common-utils\";\n\nfunction concatFiles(arr: readonly string[]): string {\n  if (!arr.length) return \"\";\n  let output = \"\";\n\n  for (const s of arr) {\n    if (!s.startsWith(\"---\")) output += \"---\\n\";\n    output += s + \"\\n\";\n  }\n\n  return output;\n}\n\nfunction readFileString(path: string): Promise<string> {\n  logger.log(LogLevel.Debug, `Reading file \"${path}\"`);\n  return readFile(path, \"utf8\");\n}\n\nasync function readFilesInDir(dir: string): Promise<string> {\n  logger.log(LogLevel.Debug, `Reading directory \"${dir}\"`);\n\n  const files = await readdir(dir);\n  const contents = await Promise.all(\n    files.map((file) => readFileString(join(dir, file)))\n  );\n\n  return concatFiles(contents);\n}\n\nfunction readFiles(cwd: string, files: readonly string[]): Promise<string[]> {\n  return Promise.all(\n    files.map(async (file) => {\n      if (file === \"-\") {\n        logger.log(LogLevel.Debug, \"Reading from stdin\");\n        return getStdin();\n      }\n\n      const path = resolve(cwd, file);\n      const stats = await stat(path);\n\n      return stats.isDirectory() ? readFilesInDir(path) : readFileString(path);\n    })\n  );\n}\n\nexport interface MigrateArguments extends RootArguments {\n  filename: string | string[];\n  esm?: boolean;\n}\n\nexport const migrateCmd: Command<MigrateArguments> = {\n  command: \"migrate\",\n  describe: \"Migrate YAML into components\",\n  builder(argv) {\n    /* istanbul ignore next */\n    let base = argv\n      // HACK: Don't set the type of filename option to \"array\" because yargs\n      // can't parse `migrate -f -` properly.\n      // Link: https://github.com/tommy351/kosko/issues/17\n      .option(\"filename\", {\n        type: \"string\",\n        describe: \"File, directory to migrate\",\n        required: true,\n        alias: \"f\"\n      })\n      .example(\"$0 migrate -f path/to/file\", \"Read from the path\")\n      .example(\"$0 migrate -f -\", \"Read from stdin\");\n\n    // eslint-disable-next-line no-restricted-globals\n    if (process.env.BUILD_TARGET === \"node\") {\n      base = base.option(\"esm\", {\n        type: \"boolean\",\n        describe: \"Generate ECMAScript module (ESM) files\"\n      });\n    }\n\n    return base;\n  },\n  async handler(args) {\n    const file = concatFiles(await readFiles(args.cwd, toArray(args.filename)));\n    const content = await migrateString(file, {\n      ...(args.esm && { format: MigrateFormat.ESM })\n    });\n\n    await print(content);\n  }\n};\n","import { isAbsolute, resolve } from \"node:path\";\nimport yargs from \"yargs\";\nimport { generateCmd } from \"./generate/command\";\nimport { initCmd } from \"./init/command\";\nimport { validateCmd } from \"./validate\";\nimport { migrateCmd } from \"./migrate\";\nimport { setupLogger } from \"../cli/logger\";\nimport { cwd } from \"node:process\";\nimport { version } from \"../../package.json\";\n\nexport function createRootCommand(args: readonly string[]) {\n  return yargs(args)\n    .scriptName(\"kosko\")\n    .version(version)\n    .exitProcess(false)\n    .option(\"cwd\", {\n      type: \"string\",\n      describe: \"Path of working directory\",\n      global: true,\n      default: cwd(),\n      defaultDescription: \"CWD\",\n      coerce(arg) {\n        return isAbsolute(arg) ? arg : resolve(arg);\n      }\n    })\n    .option(\"log-level\", {\n      type: \"string\",\n      describe: \"Set log level\",\n      global: true,\n      default: \"info\"\n    })\n    .option(\"silent\", {\n      type: \"boolean\",\n      describe: \"Disable log output\",\n      global: true,\n      default: false\n    })\n    .group([\"cwd\", \"log-level\", \"silent\", \"help\", \"version\"], \"Global Options:\")\n    .middleware(setupLogger)\n    .command(initCmd)\n    .command(generateCmd)\n    .command(validateCmd)\n    .command(migrateCmd)\n    .demandCommand();\n}\n","/**\n * CLI.\n *\n * @packageDocumentation\n */\n\nimport { parse } from \"./cli/command\";\nimport { createRootCommand } from \"./commands/root\";\nimport { argv } from \"node:process\";\n\nexport { handleError } from \"./cli/error\";\n\n/**\n * Runs CLI with the given arguments.\n *\n * @public\n */\nexport async function run(\n  args: readonly string[] = argv.slice(2)\n): Promise<void> {\n  await parse(createRootCommand(args), args);\n}\n"],"names":["parse","input","argv","Promise","resolve","reject","err","args","output","console","error","loadConfig","base","config","loadConfigFile","cwd","searchConfig","envs","baseEnvironment","env","filter","components","require","loaders","getConfig","length","loader","bail","CLIError","generateBuilder","option","type","describe","alias","array","coerce","parseSetOptions","default","positional","generateCmd","command","builder","PrintFormat","YAML","choices","Object","values","example","handler","printFormat","IGNORE_FILES","isFolderEmpty","path","files","readdir","filtered","name","some","pattern","test","generateKoskoConfig","additionalConfig","content","join","EOL","readJson","readFile","JSON","getErrorCode","generatePackageJson","ctx","data","logger","log","LogLevel","Debug","stringify","scripts","generate","validate","undefined","TEMPLATE_DIR","fileURLToPath","url","generateFromTemplateFile","template","generateReadme","TEMPLATE_FILES","baseDependencies","cjsTemplate","dependencies","all","map","file","BASE_TSCONFIG","tsDevDependencies","generateTsConfig","compilerOptions","extends","typeRoots","generateTsEnvFiles","tsTemplate","devDependencies","esmTemplate","tsEsmTemplate","extensions","getRequireExtensions","x","substring","module","moduleResolution","fileExists","access","detectPackageManager","isYarn","isPnpm","getInstallCommand","packageManager","dev","installDependencies","Info","pc","cyan","spawn","stdio","ADBLOCK","DISABLE_OPENCOLLECTIVE","checkPath","force","stats","stat","isDirectory","Trace","writeFiles","filePath","mkdir","dirname","recursive","writeFile","initCmd","typescript","esm","runCmd","cdPath","getCDPath","startsWith","sep","relative","installSuccessful","install","Warn","cmd","desc","Boolean","line","validateCmd","print","stdout","write","concatFiles","arr","s","readFileString","readFilesInDir","dir","contents","migrateCmd","required","toArray","filename","getStdin","migrateString","format","MigrateFormat","ESM","createRootCommand","yargs","scriptName","version","exitProcess","global","defaultDescription","arg","isAbsolute","group","middleware","setupLogger","demandCommand","run","slice"],"mappings":"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"}
/**
 * Manages environments in Kosko.
 *
 * @packageDocumentation
 */

/**
 * Returns a new asynchronized {@link Environment}.
 *
 * @public
 */
export declare function createAsyncEnvironment(): Environment;

/**
 * Returns the default reducers which load environment variables asynchronously
 * using the specified `loader`.
 *
 * @public
 */
export declare function createAsyncLoaderReducers(loader: Loader): Reducer[];

/**
 * Returns a new {@link Environment} which loads environment variables using
 * Node.js's `require()` function.
 *
 * @public
 */
export declare function createNodeCJSEnvironment(options?: NodeEnvironmentOptions): Environment;

/**
 * Returns a new {@link Environment} which loads environment variables using
 * ECMAScript module (ESM) `import()` function.
 *
 * @public
 */
export declare function createNodeESMEnvironment(options?: NodeEnvironmentOptions): Environment;

/**
 * Returns a new synchronized {@link Environment}.
 *
 * @public
 */
export declare function createSyncEnvironment(): Environment;

/**
 * Returns the default reducers which load environment variables synchronously
 * using the specified `loader`.
 *
 * @public
 */
export declare function createSyncLoaderReducers(loader: Loader): Reducer[];

/**
 * @public
 */
declare const env: Environment;
export default env;

/**
 * Contains environment context and can be used to fetch environment variables.
 *
 * @public
 */
export declare interface Environment extends Pick<ReducerList, "setReducers" | "resetReducers"> {
    /**
     * Current working directory (CWD).
     *
     * @defaultValue `process.cwd()` on Node.js, or `/` on browsers.
     */
    cwd: string;
    /**
     * Current environment.
     */
    env?: string | string[];
    /**
     * Path patterns of environment files.
     */
    paths: Paths;
    /**
     * File extensions of environments.
     */
    extensions: string[];
    /**
     * Returns global variables.
     */
    global(): any;
    /**
     * Returns component variables merged with global variables.
     *
     * @param name - Component name
     */
    component(name: string): any;
}

/**
 * Loads environment variables.
 *
 * @public
 */
export declare interface Loader {
    /**
     * Returns global variables. If the returned value is an array, the
     * value will be flattened.
     */
    global(): any;
    /**
     * Returns component variables. If the returned value is an array,
     * the value will be flattened.
     *
     * @param name - Component name
     */
    component(name: string): any;
}

/**
 * Options for creating a Node.js environment.
 *
 * @public
 */
export declare interface NodeEnvironmentOptions {
    /**
     * Current working directory (CWD).
     *
     * @defaultValue `process.cwd()`
     */
    cwd?: string;
}

/**
 * Path patterns of environment files.
 *
 * @remarks
 * Following tokens can be used in path patterns.
 *
 * - `#{environment}` - Environment name.
 *
 * - `#{component}` - Component name.
 *
 * @public
 */
export declare interface Paths {
    /**
     * Path pattern of global environment files.
     *
     * @defaultValue `environments/#{environment}`
     */
    global: string;
    /**
     * Path pattern of component environment files.
     *
     * @defaultValue `environments/#{environment}/#{component}`
     */
    component: string;
}

/**
 * Describes a step in the variables overriding chain.
 *
 * @public
 */
export declare interface Reducer {
    /**
     * Name of the reducer.
     */
    name: string;
    /**
     * Overrides variables for the specified component.
     * If component name is not specified then overrides only
     * global variables.
     */
    reduce(target: Record<string, any>, componentName?: string): Record<string, any>;
}

/**
 * A collection of {@link Reducer}.
 *
 * @public
 */
export declare interface ReducerList {
    /**
     * Returns a list of reducers.
     */
    getReducers(): readonly Reducer[];
    /**
     * Updates reducer list with the return value of `callback`.
     */
    setReducers(callback: (reducers: readonly Reducer[]) => Reducer[]): void;
    /**
     * Resets reducer list to the defaults.
     */
    resetReducers(): void;
}

export { }

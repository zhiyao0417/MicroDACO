{"version":3,"file":"index.base.mjs","sources":["../src/reduce.ts","../src/merge.ts","../src/environment/base.ts","../src/environment/async.ts","../src/environment/sync.ts","../src/environment/node-cjs.ts","../src/environment/node-esm.ts","../src/environment/entry.ts"],"sourcesContent":["/**\n * Describes a step in the variables overriding chain.\n *\n * @public\n */\nexport interface Reducer {\n  /**\n   * Name of the reducer.\n   */\n  name: string;\n\n  /**\n   * Overrides variables for the specified component.\n   * If component name is not specified then overrides only\n   * global variables.\n   */\n  reduce(\n    target: Record<string, any>,\n    componentName?: string\n  ): Record<string, any>;\n}\n\nexport function reduce(\n  reducers: readonly Reducer[],\n  componentName?: string\n): any {\n  return reducers.reduce(\n    (target, reducer) => reducer.reduce(target, componentName),\n    {}\n  );\n}\n\nexport async function reduceAsync(\n  reducers: readonly Reducer[],\n  componentName?: string\n): Promise<any> {\n  let target = {};\n\n  for (const reducer of reducers) {\n    target = await reducer.reduce(target, componentName);\n  }\n\n  return target;\n}\n","import deepMerge from \"deepmerge\";\nimport { isPlainObject } from \"is-plain-object\";\n\nexport function merge(data: any[]): any {\n  return deepMerge.all(data, {\n    isMergeableObject: isPlainObject\n  });\n}\n\nexport async function mergeAsync(data: any[]): Promise<any> {\n  const values = await Promise.all(data);\n  return merge(values);\n}\n","import { Environment, Loader, ReducerExecutor, ReducerList } from \"./types\";\nimport { reduce, reduceAsync, Reducer } from \"../reduce\";\nimport { merge, mergeAsync } from \"../merge\";\nimport { toArray } from \"@kosko/common-utils\";\n\nexport type EnvironmentOptions = Pick<\n  ReducerList,\n  \"setReducers\" | \"resetReducers\"\n> &\n  ReducerExecutor &\n  Partial<Pick<Environment, \"cwd\" | \"extensions\">>;\n\nexport function createEnvironment({\n  cwd = \"/\",\n  extensions = [],\n  setReducers,\n  resetReducers,\n  reduce\n}: EnvironmentOptions): Environment {\n  return {\n    cwd,\n    paths: {\n      global: \"environments/#{environment}\",\n      component: \"environments/#{environment}/#{component}\"\n    },\n    extensions,\n    setReducers,\n    resetReducers,\n    global: () => reduce(),\n    component: (name) => reduce(name)\n  };\n}\n\nexport function createLoaderReducers(\n  loader: Loader,\n  mergeValues: (data: any[]) => any\n): Reducer[] {\n  return [\n    {\n      name: \"global\",\n      reduce: (values) => mergeValues([values, ...toArray(loader.global())])\n    },\n    {\n      name: \"component\",\n      reduce: (values, componentName) => {\n        if (!componentName) return values;\n\n        return mergeValues([\n          values,\n          ...toArray(loader.component(componentName))\n        ]);\n      }\n    }\n  ];\n}\n\n/**\n * Returns the default reducers which load environment variables synchronously\n * using the specified `loader`.\n *\n * @public\n */\nexport function createSyncLoaderReducers(loader: Loader): Reducer[] {\n  return createLoaderReducers(loader, merge);\n}\n\n/**\n * Returns the default reducers which load environment variables asynchronously\n * using the specified `loader`.\n *\n * @public\n */\nexport function createAsyncLoaderReducers(loader: Loader): Reducer[] {\n  return createLoaderReducers(loader, mergeAsync);\n}\n\nexport function createReducerList(\n  initialReducers: readonly Reducer[] = []\n): ReducerList {\n  let reducers: readonly Reducer[] = [];\n\n  function resetReducers() {\n    reducers = [...initialReducers];\n  }\n\n  resetReducers();\n\n  return {\n    getReducers: () => reducers,\n    setReducers: (callback) => {\n      reducers = callback([...reducers]);\n    },\n    resetReducers\n  };\n}\n\nexport function createSyncReducerExecutor({\n  getReducers\n}: ReducerList): ReducerExecutor {\n  return {\n    reduce: (componentName) => reduce(getReducers(), componentName)\n  };\n}\n\nexport function createAsyncReducerExecutor({\n  getReducers\n}: ReducerList): ReducerExecutor {\n  return {\n    reduce: (componentName) => reduceAsync(getReducers(), componentName)\n  };\n}\n","import {\n  createAsyncReducerExecutor,\n  createEnvironment,\n  createReducerList\n} from \"./base\";\nimport { Environment } from \"./types\";\n\n/**\n * Returns a new asynchronized {@link Environment}.\n *\n * @public\n */\nexport function createAsyncEnvironment(): Environment {\n  const reducers = createReducerList();\n  const { reduce } = createAsyncReducerExecutor(reducers);\n\n  return createEnvironment({\n    ...reducers,\n    reduce\n  });\n}\n","import {\n  createSyncReducerExecutor,\n  createEnvironment,\n  createReducerList\n} from \"./base\";\nimport { Environment } from \"./types\";\n\n/**\n * Returns a new synchronized {@link Environment}.\n *\n * @public\n */\nexport function createSyncEnvironment(): Environment {\n  const reducers = createReducerList();\n  const { reduce } = createSyncReducerExecutor(reducers);\n\n  return createEnvironment({\n    ...reducers,\n    reduce\n  });\n}\n","import { createNodeEnvironment, NodeEnvironmentOptions } from \"./node\";\nimport { Environment } from \"./types\";\nimport { createSyncReducerExecutor } from \"./base\";\nimport { merge } from \"../merge\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { getErrorCode } from \"@kosko/common-utils\";\n\n/**\n * Returns a new {@link Environment} which loads environment variables using\n * Node.js's `require()` function.\n *\n * @public\n */\nexport function createNodeCJSEnvironment(\n  options: NodeEnvironmentOptions = {}\n): Environment {\n  /* istanbul ignore next */\n  // eslint-disable-next-line no-restricted-globals\n  if (process.env.BUILD_TARGET !== \"node\") {\n    throw new Error(\"createNodeCJSEnvironment is only supported on Node.js\");\n  }\n\n  return createNodeEnvironment({\n    ...options,\n    createReducerExecutor: createSyncReducerExecutor,\n    mergeValues: merge,\n    requireModule: (env, id) => {\n      // The path doesn't need to be resolved before importing, because `require()`\n      // resolves the path automatically anyway.\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const mod = require(id);\n        return mod && mod.__esModule ? mod.default : mod;\n      } catch (err) {\n        if (getErrorCode(err) === \"MODULE_NOT_FOUND\") {\n          logger.log(LogLevel.Debug, `Cannot find module: ${id}`, {\n            error: err\n          });\n          return {};\n        }\n\n        throw err;\n      }\n    }\n  });\n}\n","import { importPath, resolve } from \"@kosko/require\";\nimport { createNodeEnvironment, NodeEnvironmentOptions } from \"./node\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { mergeAsync } from \"../merge\";\nimport { Environment } from \"./types\";\nimport { createAsyncReducerExecutor } from \"./base\";\n\n/**\n * Returns a new {@link Environment} which loads environment variables using\n * ECMAScript module (ESM) `import()` function.\n *\n * @public\n */\nexport function createNodeESMEnvironment(\n  options: NodeEnvironmentOptions = {}\n): Environment {\n  /* istanbul ignore next */\n  // eslint-disable-next-line no-restricted-globals\n  if (process.env.BUILD_TARGET === \"browser\") {\n    throw new Error(\n      \"createNodeESMEnvironment is only supported on Node.js and Deno\"\n    );\n  }\n\n  return createNodeEnvironment({\n    ...options,\n    createReducerExecutor: createAsyncReducerExecutor,\n    mergeValues: mergeAsync,\n    requireModule: async (env, id) => {\n      // Resolve path before importing ESM modules because file extensions are\n      // mandatory for `import()`. Import paths which are used in `require()`\n      // must be resolved as below.\n      //\n      // - Directory: `./dir` -> `./dir/index.js`\n      // - File: `./file` -> `./file.js`\n      //\n      // https://nodejs.org/api/esm.html#esm_mandatory_file_extensions\n      const path = await resolve(id, {\n        extensions: env.extensions.map((ext) => `.${ext}`)\n      });\n\n      if (!path) {\n        logger.log(LogLevel.Debug, \"Module not found\", {\n          data: {\n            path: id,\n            extensions: env.extensions\n          }\n        });\n        return {};\n      }\n\n      logger.log(LogLevel.Debug, `Importing ${path}`);\n\n      const mod = await importPath(path);\n      return mod.default;\n    }\n  });\n}\n","import { createAsyncEnvironment } from \"./async\";\n\n/**\n * @public\n */\nexport const env = createAsyncEnvironment();\n"],"names":["reduce","reducers","componentName","target","reducer","reduceAsync","merge","data","deepMerge","all","isMergeableObject","isPlainObject","mergeAsync","values","Promise","createEnvironment","cwd","extensions","setReducers","resetReducers","paths","global","component","name","createLoaderReducers","loader","mergeValues","toArray","createSyncLoaderReducers","createAsyncLoaderReducers","createReducerList","initialReducers","getReducers","callback","createSyncReducerExecutor","createAsyncReducerExecutor","createAsyncEnvironment","createSyncEnvironment","createNodeCJSEnvironment","options","Error","createNodeESMEnvironment","env"],"mappings":"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"}
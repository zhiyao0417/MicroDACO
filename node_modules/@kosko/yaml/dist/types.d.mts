/**
 * Loads Kubernetes YAML files.
 *
 * @packageDocumentation
 */

/**
 * @public
 */
export declare function getResourceModule(res: ResourceKind): Promise<ResourceModule | undefined>;

/**
 * Loads a Kubernetes YAML file from `path`.
 *
 * @param path - Path to a Kubernetes YAML file.
 * @public
 */
export declare function loadFile(path: string, options?: LoadOptions): () => Promise<Manifest[]>;

/**
 * @public
 */
export declare interface LoadOptions {
    transform?(this: void, manifest: Manifest): Manifest | null | undefined;
}

/**
 * Loads a Kubernetes YAML file from a string.
 *
 * @public
 */
export declare function loadString(content: string, options?: LoadOptions): Promise<Manifest[]>;

/**
 * Loads a Kubernetes YAML file from `url`.
 *
 * @remarks
 * By default, this function uses `fetch` API defined in the global scope.
 * On Node.js, if `global.fetch` is undefined, {@link https://github.com/node-fetch/node-fetch | node-fetch}
 * will be used instead.
 *
 * @param url - URL to a Kubernetes YAML file.
 * @public
 */
export declare function loadUrl(url: RequestInfo, options?: LoadUrlOptions): () => Promise<Manifest[]>;

/**
 * {@link LoadOptions} and properties defined in {@link https://developer.mozilla.org/en-US/docs/Web/API/Request | Request} class.
 *
 * @privateRemarks
 * This type exists because sometimes `RequestInit` is `any` when `DOM` type
 * is not loaded. Using an interface instead of `LoadOptions & RequestInit`
 * allows us to ignoring `RequestInit` when it is `any`.
 *
 * @public
 */
export declare interface LoadUrlOptions extends LoadOptions, RequestInit {
    fetch?: typeof fetch;
}

/**
 * Describes an object which seems to be a Kubernetes manifest.
 *
 * @public
 */
export declare interface Manifest extends ResourceKind {
    [key: string]: unknown;
}

/**
 * @public
 */
export declare function resetResourceModules(): void;

/**
 * @public
 */
export declare interface ResourceKind {
    apiVersion: string;
    kind: string;
}

/**
 * @public
 */
export declare interface ResourceModule {
    readonly path: string;
    readonly export: string;
}

/**
 * @public
 */
export declare function setResourceModule(res: ResourceKind, mod: ResourceModule): void;

export { }

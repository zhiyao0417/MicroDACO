'use strict';

var jsYaml = require('js-yaml');
var promises = require('node:fs/promises');
var logger = require('@kosko/log');
var stringify = require('fast-safe-stringify');
var commonUtils = require('@kosko/common-utils');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var logger__default = /*#__PURE__*/_interopDefault(logger);
var stringify__default = /*#__PURE__*/_interopDefault(stringify);

async function importModule(id) {
    return require(id);
}

let moduleMap = {};
function setResourceModule(res, mod) {
    let { apiVersion , kind  } = res;
    moduleMap[apiVersion] || (moduleMap[apiVersion] = {}), moduleMap[apiVersion][kind] = mod, logger__default.default.log(logger.LogLevel.Debug, "Set resource module", {
        data: {
            resourceKind: res,
            resourceModule: mod
        }
    });
}
async function getKubernetesModels(res) {
    let { apiVersion , kind  } = res, group = function(apiVersion) {
        let arr = apiVersion.split("/");
        return 1 === arr.length ? "" : arr[0];
    }(apiVersion);
    if (group && group.includes(".") && !group.endsWith(".k8s.io")) return;
    let path = `kubernetes-models/${apiVersion}/${kind}`;
    try {
        let result = await importModule(path);
        if (result?.[kind]) {
            let mod = {
                path,
                export: kind
            };
            return setResourceModule(res, mod), mod;
        }
    } catch  {
        return;
    }
}
async function getResourceModule(res) {
    return moduleMap[res.apiVersion]?.[res.kind] ?? await getKubernetesModels(res);
}
function resetResourceModules() {
    moduleMap = {}, logger__default.default.log(logger.LogLevel.Debug, "Reset resource modules");
}

var defaultFetch = (function() {
    if ("function" == typeof fetch) return fetch;
    {
        let req = require;
        return req("node-fetch");
    }
})();

async function getConstructor(res) {
    let mod = await getResourceModule(res);
    if (!mod) {
        logger__default.default.log(logger.LogLevel.Debug, "No resource modules", {
            data: res
        });
        return;
    }
    try {
        let result = await importModule(mod.path);
        return result[mod.export];
    } catch  {
        logger__default.default.log(logger.LogLevel.Debug, "Failed to import the resource module", {
            data: mod
        });
        return;
    }
}
async function loadString(content, options = {}) {
    let { transform =(x)=>x  } = options, input = jsYaml.loadAll(content).filter((x)=>null != x), manifests = [];
    for (let entry of input){
        var value;
        if (!commonUtils.isRecord(entry)) throw Error(`The value must be an object: ${stringify__default.default(entry)}`);
        if (!("string" == typeof (value = entry).apiVersion && value.apiVersion && "string" == typeof value.kind && value.kind)) throw Error(`apiVersion and kind are required: ${stringify__default.default(entry)}`);
        let Constructor = await getConstructor(entry), manifest = transform(Constructor ? new Constructor(entry) : entry);
        manifest && manifests.push(manifest);
    }
    return manifests;
}
function loadFile(path, options) {
    return async ()=>{
        let content = await promises.readFile(path, "utf-8");
        return logger__default.default.log(logger.LogLevel.Debug, `File loaded from: ${path}`), loadString(content, options);
    };
}
function loadUrl(url, options = {}) {
    let { transform , fetch =defaultFetch , ...init } = options;
    return async ()=>{
        let res = await fetch(url, init);
        if (logger__default.default.log(logger.LogLevel.Debug, "Fetched YAML", {
            data: {
                url,
                status: res.status
            }
        }), !res.ok) throw Error(`Failed to fetch YAML file from: ${url}`);
        return loadString(await res.text(), {
            transform
        });
    };
}

exports.getResourceModule = getResourceModule;
exports.loadFile = loadFile;
exports.loadString = loadString;
exports.loadUrl = loadUrl;
exports.resetResourceModules = resetResourceModules;
exports.setResourceModule = setResourceModule;
//# sourceMappingURL=index.node.cjs.map

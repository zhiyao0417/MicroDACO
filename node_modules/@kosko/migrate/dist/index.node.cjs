'use strict';

var camelcase = require('camelcase');
var yaml = require('@kosko/yaml');
var stringify = require('fast-safe-stringify');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var camelcase__default = /*#__PURE__*/_interopDefault(camelcase);
var stringify__default = /*#__PURE__*/_interopDefault(stringify);

exports.MigrateFormat = void 0;
!function(MigrateFormat) {
    MigrateFormat.CJS = "cjs", MigrateFormat.ESM = "esm";
}(exports.MigrateFormat || (exports.MigrateFormat = {}));
let DEFAULT_FORMAT = exports.MigrateFormat.CJS;
function jsonStringify(data) {
    return stringify__default.default(data, void 0, "  ");
}
async function generateComponent(manifest) {
    let { apiVersion , kind , ...data } = manifest, name = camelcase__default.default(kind), mod = await yaml.getResourceModule(manifest);
    return mod ? {
        name,
        text: `new ${mod.export}(${jsonStringify(data)})`,
        imports: [
            {
                path: mod.path,
                names: [
                    mod.export
                ]
            }
        ]
    } : {
        name,
        text: jsonStringify(manifest),
        imports: []
    };
}
async function generateForList(items) {
    let result = [];
    for (let data of items)"v1" === data.apiVersion && "List" === data.kind && Array.isArray(data.items) ? result.push(...await generateForList(data.items)) : result.push(await generateComponent(data));
    return result;
}
async function migrate(data, options = {}) {
    let { format =DEFAULT_FORMAT  } = options, components = function(components) {
        let nameMap = {};
        return components.map((component)=>{
            let name = component.name, idx = nameMap[name];
            return idx ? (nameMap[name]++, name += idx) : nameMap[name] = 1, {
                ...component,
                name
            };
        });
    }(await generateForList(data)), output = "";
    for (let { path , names  } of (format === exports.MigrateFormat.CJS && (output += `"use strict";\n\n`), function(components) {
        let importMap = {};
        for (let component of components)for (let { path , names  } of component.imports)for (let name of (importMap[path] || (importMap[path] = new Set()), names))importMap[path].add(name);
        return Object.keys(importMap).map((path)=>({
                path,
                names: [
                    ...importMap[path].values()
                ]
            }));
    }(components)))format === exports.MigrateFormat.CJS ? output += `const { ${names.join(", ")} } = require("${path}");\n` : output += `import { ${names.join(", ")} } from "${path}";\n`;
    for (let { name , text  } of components)output += `\nconst ${name} = ${text};\n`;
    let names1 = components.map((c)=>c.name).join(", ");
    return format === exports.MigrateFormat.CJS ? output += `\nmodule.exports = [${names1}];\n` : output += `\nexport default [${names1}];\n`, output;
}
async function migrateString(input, options) {
    return migrate(await yaml.loadString(input), options);
}

exports.migrate = migrate;
exports.migrateString = migrateString;
//# sourceMappingURL=index.node.cjs.map

{"version":3,"file":"index.base.mjs","sources":["../src/extensions.ts","../src/resolve.ts","../src/import.ts"],"sourcesContent":["import { createRequire } from \"node:module\";\n\nconst BASE_EXTENSIONS = [\".js\", \".json\"];\n\n/**\n * Returns file extensions which can be imported.\n *\n * @defaultValue Node.js\n * ```js\n * [\".cjs\", \".mjs\", \".js\", \".json\", \".node\"]\n * ```\n *\n * @public\n */\nexport function getRequireExtensions(): string[] {\n  // eslint-disable-next-line no-restricted-globals\n  switch (process.env.BUILD_TARGET) {\n    case \"node\": {\n      const req =\n        // eslint-disable-next-line no-restricted-globals\n        process.env.BUILD_FORMAT === \"esm\"\n          ? createRequire(import.meta.url)\n          : require;\n\n      const extensions = new Set([\n        \".cjs\",\n        \".mjs\",\n        ...BASE_EXTENSIONS,\n        // The global `require` function includes extensions registered by\n        // other package (e.g. ts-node).\n        // However, this function always returns an empty array on Node.js 20+.\n        ...req(\"../lib/node-extensions.cjs\")()\n      ]);\n\n      return [...extensions];\n    }\n    case \"deno\":\n      return [\".ts\", ...BASE_EXTENSIONS];\n\n    default:\n      return BASE_EXTENSIONS;\n  }\n}\n","import { stat } from \"node:fs/promises\";\nimport { join, resolve as resolvePath } from \"node:path\";\nimport { cwd } from \"node:process\";\nimport { getRequireExtensions } from \"./extensions\";\nimport { getErrorCode } from \"@kosko/common-utils\";\n\n/**\n * @public\n */\nexport interface ResolveOptions {\n  /**\n   * The directory to resolve from.\n   *\n   * @defaultValue `process.cwd()`\n   */\n  baseDir?: string;\n\n  /**\n   * File extensions to resolve.\n   *\n   * @defaultValue `getRequireExtensions()`\n   */\n  extensions?: readonly string[];\n}\n\nasync function fileExists(path: string) {\n  try {\n    const stats = await stat(path);\n    return stats.isFile();\n  } catch (err) {\n    if (getErrorCode(err) === \"ENOENT\") return false;\n    throw err;\n  }\n}\n\n/**\n * Resolves path to the specified module.\n *\n * @public\n */\nexport async function resolve(\n  id: string,\n  options: ResolveOptions = {}\n): Promise<string | undefined> {\n  // Implementation is based on: https://nodejs.org/api/modules.html#all-together\n  const { baseDir = cwd(), extensions = getRequireExtensions() } = options;\n  const resolved = resolvePath(baseDir, id);\n  const index = join(resolved, \"index\");\n\n  const possiblePaths = [\n    resolved,\n    ...extensions.map((ext) => resolved + ext),\n    ...extensions.map((ext) => index + ext)\n  ];\n\n  for (const path of possiblePaths) {\n    if (await fileExists(path)) {\n      return path;\n    }\n  }\n}\n","import { pathToFileURL } from \"node:url\";\n\n/**\n * Imports a module from the given `path`.\n *\n * @param path - Absolute path to a module. It must not be a file URL or a relative path.\n * @public\n */\nexport async function importPath(path: string) {\n  const url = pathToFileURL(path).toString();\n\n  if (path.endsWith(\".json\")) {\n    return import(url, { assert: { type: \"json\" } });\n  }\n\n  return import(url);\n}\n"],"names":["BASE_EXTENSIONS","getRequireExtensions","fileExists","path","stats","stat","isFile","err","getErrorCode","resolve","id","options","baseDir","cwd","extensions","resolved","resolvePath","index","join","possiblePaths","map","ext","importPath","url","pathToFileURL","toString","endsWith","assert","type"],"mappings":";;;;;;AAEA,IAAMA,eAAkB,GAAA;AAAC,IAAA,KAAA;AAAO,IAAA,OAAA;AAAQ,CAAA,CAAA;AAYjC,SAASC,oBAAiC,GAAA;AA0BpCD,IAAAA,OAAAA,eAAAA,CAAAA;AAEb;;ACjBA,eAAeE,UAAAA,CAAWC,IAAY,EAAE;IACtC,IAAI;QACF,IAAMC,KAAAA,GAAQ,MAAMC,IAAKF,CAAAA,IAAAA,CAAAA,CAAAA;AACzB,QAAA,OAAOC,MAAME,MAAM,EAAA,CAAA;AACrB,KAAA,CAAE,OAAOC,GAAK,EAAA;AACZ,QAAA,IAAIC,QAAsB,KAAtBA,YAAaD,CAAAA,GAAAA,CAAAA,EAAmB,OAAO,CAAA,CAAA,CAAA;AAC3C,QAAA,MAAMA,GAAI,CAAA;AACZ,KAAA;AACF,CAAA;AAOO,eAAeE,OACpBC,CAAAA,EAAU,EACVC,OAA0B,GAAA,EAAE,EACC;AAE7B,IAAA,IAAM,EAAEC,OAAUC,EAAAA,GAAAA,EAAAA,GAAOC,UAAAA,EAAab,yBAAwB,GAAGU,OAC3DI,EAAAA,QAAAA,GAAWC,UAAYJ,OAASF,EAAAA,EAAAA,CAAAA,EAChCO,QAAQC,IAAKH,CAAAA,QAAAA,EAAU,UAEvBI,aAAgB,GAAA;AACpBJ,QAAAA,QAAAA;AACGD,QAAAA,GAAAA,UAAAA,CAAWM,GAAG,CAAC,CAACC,GAAAA,GAAQN,QAAWM,GAAAA,GAAAA,CAAAA;AACnCP,QAAAA,GAAAA,UAAAA,CAAWM,GAAG,CAAC,CAACC,GAAAA,GAAQJ,KAAQI,GAAAA,GAAAA,CAAAA;AACpC,KAAA,CAAA;AAED,IAAA,KAAK,IAAMlB,IAAQgB,IAAAA,aAAAA,CACjB,IAAI,MAAMjB,UAAAA,CAAWC,OACnB,OAAOA,IAAAA,CAAAA;AAGb;;ACpDO,eAAemB,UAAWnB,CAAAA,IAAY,EAAE;IAC7C,IAAMoB,GAAAA,GAAMC,aAAcrB,CAAAA,IAAAA,CAAAA,CAAMsB,QAAQ,EAAA,CAAA;AAExC,IAAA,OAAItB,KAAKuB,QAAQ,CAAC,OACT,CAAA,GAAA,OAAOH,GAAK,EAAA;QAAEI,MAAQ,EAAA;YAAEC,IAAM,EAAA,MAAA;AAAO,SAAA;KAGvC,CAAA,GAAA,OAAOL,GAFb,CAAA,CAAA;AAGH;;;;"}
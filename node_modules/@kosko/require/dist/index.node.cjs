'use strict';

var promises = require('node:fs/promises');
var node_path = require('node:path');
var node_process = require('node:process');
var commonUtils = require('@kosko/common-utils');
var node_url = require('node:url');

let BASE_EXTENSIONS = [
    ".js",
    ".json"
];
function getRequireExtensions() {
    {
        let req = require, extensions = new Set([
            ".cjs",
            ".mjs",
            ...BASE_EXTENSIONS,
            ...req("../lib/node-extensions.cjs")()
        ]);
        return [
            ...extensions
        ];
    }
}

async function fileExists(path) {
    try {
        let stats = await promises.stat(path);
        return stats.isFile();
    } catch (err) {
        if ("ENOENT" === commonUtils.getErrorCode(err)) return !1;
        throw err;
    }
}
async function resolve(id, options = {}) {
    let { baseDir =node_process.cwd() , extensions =getRequireExtensions()  } = options, resolved = node_path.resolve(baseDir, id), index = node_path.join(resolved, "index"), possiblePaths = [
        resolved,
        ...extensions.map((ext)=>resolved + ext),
        ...extensions.map((ext)=>index + ext)
    ];
    for (let path of possiblePaths)if (await fileExists(path)) return path;
}

let ESM_IMPORT_DISABLED = "1" === node_process.env.ESM_IMPORT_DISABLED;
async function importDefault(id) {
    let mod = await import(id);
    return mod.default;
}
let importWithOpts = (async ()=>{
    if (!ESM_IMPORT_DISABLED && function() {
        let [major, minor] = node_process.version.substring(1).split(".").map((x)=>parseInt(x, 10));
        switch(major){
            case 16:
                return minor >= 14;
            case 17:
                return minor >= 1;
            default:
                return major >= 18;
        }
    }()) return importDefault("../lib/import-with-opts.mjs");
})(), req = require;
function requireModule(path) {
    let mod = req(path);
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
async function tryImport(path, fn) {
    let url = node_url.pathToFileURL(path).toString();
    try {
        return await fn(url);
    } catch (err) {
        if ("ERR_UNKNOWN_FILE_EXTENSION" !== commonUtils.getErrorCode(err)) throw err;
    }
    return requireModule(path);
}
async function importJson(path) {
    let importFn = await importWithOpts;
    return importFn ? tryImport(path, (url)=>importFn(url, {
            assert: {
                type: "json"
            }
        })) : requireModule(path);
}
async function importPath(path) {
    return ESM_IMPORT_DISABLED ? requireModule(path) : path.endsWith(".json") ? importJson(path) : tryImport(path, (url)=>import(url));
}

exports.getRequireExtensions = getRequireExtensions;
exports.importPath = importPath;
exports.resolve = resolve;
//# sourceMappingURL=index.node.cjs.map

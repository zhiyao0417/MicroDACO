import { stat } from 'node:fs/promises';
import { resolve as resolve$1, join } from 'node:path';
import { cwd } from 'node:process';
import { getErrorCode } from '@kosko/common-utils';
import { pathToFileURL } from 'node:url';

let BASE_EXTENSIONS = [
    ".js",
    ".json"
];
function getRequireExtensions() {
    return BASE_EXTENSIONS;
}

async function fileExists(path) {
    try {
        let stats = await stat(path);
        return stats.isFile();
    } catch (err) {
        if ("ENOENT" === getErrorCode(err)) return !1;
        throw err;
    }
}
async function resolve(id, options = {}) {
    let { baseDir =cwd() , extensions =getRequireExtensions()  } = options, resolved = resolve$1(baseDir, id), index = join(resolved, "index"), possiblePaths = [
        resolved,
        ...extensions.map((ext)=>resolved + ext),
        ...extensions.map((ext)=>index + ext)
    ];
    for (let path of possiblePaths)if (await fileExists(path)) return path;
}

async function importPath(path) {
    let url = pathToFileURL(path).toString();
    return path.endsWith(".json") ? import(url, {
        assert: {
            type: "json"
        }
    }) : import(url);
}

export { getRequireExtensions, importPath, resolve };
//# sourceMappingURL=index.base.mjs.map

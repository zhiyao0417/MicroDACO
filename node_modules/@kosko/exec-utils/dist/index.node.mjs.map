{"version":3,"file":"index.node.mjs","sources":["../src/arg.ts","../src/error.ts","../src/spawn.ts"],"sourcesContent":["function getArgName(name: string) {\n  return `--${name}`;\n}\n\n/**\n * @public\n */\nexport function booleanArg(name: string, value?: boolean) {\n  return value ? [getArgName(name)] : [];\n}\n\n/**\n * @public\n */\nexport function stringArg(name: string, value?: string) {\n  return value ? [getArgName(name), value] : [];\n}\n\n/**\n * @public\n */\nexport function stringArrayArg(name: string, values: string[] = []) {\n  return values.reduce(\n    (acc, value) => [...acc, getArgName(name), value],\n    [] as string[]\n  );\n}\n","/**\n * @public\n */\nexport interface SpawnErrorOptions {\n  exitCode: number;\n  command: string;\n  args: readonly string[];\n  stdout: string;\n  stderr: string;\n}\n\n/**\n * @public\n */\nexport class SpawnError extends Error {\n  public readonly exitCode: number;\n  public readonly command: string;\n  public readonly args: readonly string[];\n  public readonly stdout: string;\n  public readonly stderr: string;\n\n  constructor(options: SpawnErrorOptions) {\n    super(\n      [\n        `Command failed with exit code ${options.exitCode}: ${\n          options.command\n        } ${options.args.join(\" \")}`,\n        options.stderr.trim(),\n        options.stdout.trim()\n      ]\n        .filter(Boolean)\n        .join(\"\\n\")\n    );\n\n    this.exitCode = options.exitCode;\n    this.command = options.command;\n    this.args = options.args;\n    this.stdout = options.stdout;\n    this.stderr = options.stderr;\n  }\n}\n\nSpawnError.prototype.name = \"SpawnError\";\n","import crossSpawn from \"cross-spawn\";\nimport { StdioOptions } from \"node:child_process\";\nimport assert from \"node:assert\";\nimport { SpawnError } from \"./error\";\n\n/**\n * Output of stdout and stderr. When {@link SpawnOptions.stdio} is set to values\n * other than `pipe`, the result value will be an empty string.\n *\n * @public\n */\nexport interface SpawnResult {\n  stdout: string;\n  stderr: string;\n}\n\n/**\n * @public\n */\nexport interface SpawnOptions {\n  /**\n   * Current working directory (CWD).\n   *\n   * @defaultValue `process.cwd()`\n   */\n  cwd?: string;\n\n  /**\n   * Environment variables.\n   *\n   * @defaultValue `process.env`\n   */\n  env?: Record<string, string>;\n\n  /**\n   * @defaultValue `[\"pipe\", \"pipe\", \"pipe\"]`\n   */\n  stdio?: StdioOptions;\n\n  /**\n   * Writes data to `stdin`. When this value is given, `stdio[0]` must be `pipe`.\n   */\n  input?: string;\n}\n\n/**\n * Spawns a new child process.\n *\n * @throws {@link SpawnError}\n * Thrown if the process terminates with non-zero exit code.\n *\n * @public\n * @see {@link https://nodejs.org/dist/latest-v18.x/docs/api/child_process.html#child_processspawncommand-args-options | Node.js child_process.spawn}\n */\nexport function spawn(\n  command: string,\n  args: readonly string[] = [],\n  options: SpawnOptions = {}\n): Promise<SpawnResult> {\n  const proc = crossSpawn(command, args, options);\n  const stdoutChunks: string[] = [];\n  const stderrChunks: string[] = [];\n\n  if (options.input) {\n    assert(proc.stdin);\n    proc.stdin.end(options.input);\n  }\n\n  proc.stdout?.on(\"data\", (chunk) => {\n    stdoutChunks.push(chunk);\n  });\n\n  proc.stderr?.on(\"data\", (chunk) => {\n    stderrChunks.push(chunk);\n  });\n\n  return new Promise<SpawnResult>((resolve, reject) => {\n    proc.on(\"error\", (err) => reject(err));\n\n    proc.on(\"close\", (code) => {\n      const stdout = stdoutChunks.join(\"\");\n      const stderr = stderrChunks.join(\"\");\n\n      if (code) {\n        reject(\n          new SpawnError({\n            exitCode: code,\n            command,\n            args,\n            stdout,\n            stderr\n          })\n        );\n      } else {\n        resolve({ stdout, stderr });\n      }\n    });\n  });\n}\n"],"names":["booleanArg","name","value","stringArg","stringArrayArg","values","reduce","acc","SpawnError","Error","constructor","options","exitCode","command","args","join","stderr","trim","stdout","filter","Boolean","prototype","spawn","proc","crossSpawn","stdoutChunks","stderrChunks","input","assert","stdin","end","on","chunk","push","Promise","resolve","reject","err","code"],"mappings":"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"}
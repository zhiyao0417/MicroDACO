{"version":3,"file":"index.node.mjs","sources":["../src/LogLevel.ts","../src/Logger.ts","../src/NodeLogWriter.ts","../src/createLogger.node.ts","../src/ConsoleLogWriter.ts","../src/SilentLogWriter.ts","../src/index.ts"],"sourcesContent":["/**\n * @public\n */\nexport enum LogLevel {\n  Trace = 1,\n  Debug = 2,\n  Info = 3,\n  Warn = 4,\n  Error = 5,\n  Fatal = 6\n}\n\nconst LOG_LEVEL_MAP: Record<string, LogLevel> = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Info,\n  warn: LogLevel.Warn,\n  error: LogLevel.Error,\n  fatal: LogLevel.Fatal\n};\n\n/**\n * @public\n */\nexport function logLevelFromString(level: string): LogLevel | undefined {\n  return LOG_LEVEL_MAP[level];\n}\n","import { LogLevel } from \"./LogLevel\";\nimport { Log, LogWriter } from \"./types\";\n\n/**\n * @public\n */\nexport interface LoggerOptions {\n  level?: LogLevel;\n  writer?: LogWriter;\n}\n\n/**\n * @public\n */\nexport default class Logger {\n  private level: LogLevel;\n  private writer: LogWriter;\n\n  public constructor(options: Required<LoggerOptions>) {\n    this.level = options.level;\n    this.writer = options.writer;\n  }\n\n  /**\n   * @example\n   * Basic message\n   * ```ts\n   * logger.log(LogLevel.Info, \"basic message\");\n   * ```\n   *\n   * @example\n   * Error\n   * ```ts\n   * logger.log(LogLevel.Error, \"error log\", {\n   *   error: new Error(\"error cause\")\n   * });\n   * ```\n   *\n   * @example\n   * Data\n   * ```ts\n   * logger.log(LogLevel.Info, \"log with data\", {\n   *   data: {\n   *     foo: \"bar\"\n   *   }\n   * });\n   * ```\n   */\n  public log(\n    level: LogLevel,\n    message: string,\n    options: Partial<Omit<Log, \"level\" | \"message\" | \"loggerLevel\">> = {}\n  ): void {\n    if (this.enabled(level)) {\n      const { time = new Date(), ...rest } = options;\n\n      this.writer.write({\n        loggerLevel: this.level,\n        level,\n        message,\n        time,\n        ...rest\n      });\n    }\n  }\n\n  /**\n   * Returns logger level.\n   */\n  public getLevel(): LogLevel {\n    return this.level;\n  }\n\n  /**\n   * Sets logger level.\n   */\n  public setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  /**\n   * Returns true if the given `level` is enabled in logger.\n   */\n  public enabled(level: LogLevel): boolean {\n    return this.level <= level;\n  }\n\n  /**\n   * Returns writer of logger.\n   */\n  public getWriter(): LogWriter {\n    return this.writer;\n  }\n\n  /**\n   * Sets writer of logger.\n   */\n  public setWriter(writer: LogWriter): void {\n    this.writer = writer;\n  }\n}\n\nexport function createLoggerFactory(createWriter: () => LogWriter) {\n  return (options: Partial<LoggerOptions> = {}): Logger => {\n    const { level = LogLevel.Info, writer = createWriter() } = options;\n\n    return new Logger({ level, writer });\n  };\n}\n","import pc from \"picocolors\";\nimport type { Formatter } from \"picocolors/types\";\nimport cleanStack from \"clean-stack\";\nimport stringify from \"fast-safe-stringify\";\nimport { LogLevel } from \"./LogLevel\";\nimport { Log, LogWriter } from \"./types\";\nimport { isRecord } from \"@kosko/common-utils\";\nimport { stderr } from \"node:process\";\n\nconst COLOR_MAP: Record<LogLevel, Formatter> = {\n  [LogLevel.Trace]: pc.gray,\n  [LogLevel.Debug]: pc.cyan,\n  [LogLevel.Info]: pc.green,\n  [LogLevel.Warn]: pc.yellow,\n  [LogLevel.Error]: pc.red,\n  [LogLevel.Fatal]: pc.bgRed\n};\n\nconst LEVEL_MAX_LENGTH = Math.max(\n  ...Object.keys(LogLevel).map((x) => x.length)\n);\n\nfunction formatLevel(level: LogLevel): string {\n  const label = LogLevel[level].toLowerCase().padEnd(LEVEL_MAX_LENGTH, \" \");\n\n  return COLOR_MAP[level](label);\n}\n\nfunction formatTime(time: Date): string {\n  const h = time.getHours().toString().padStart(2, \"0\");\n  const m = time.getMinutes().toString().padStart(2, \"0\");\n  const s = time.getSeconds().toString().padStart(2, \"0\");\n  const ms = time.getMilliseconds().toString().padStart(3, \"0\");\n\n  return `${h}:${m}:${s}.${ms}`;\n}\n\nfunction formatData(data: unknown): string {\n  return stringify(data, undefined, \"  \");\n}\n\nfunction formatError(err: unknown): string {\n  if (typeof err === \"string\") {\n    return err;\n  }\n\n  if (isRecord(err)) {\n    if (typeof err.stack === \"string\") {\n      return cleanStack(err.stack, { pretty: true });\n    }\n\n    if (typeof err.message === \"string\") {\n      return err.message;\n    }\n  }\n\n  return formatData(err);\n}\n\n/**\n * Prints log to `process.stderr`.\n *\n * @public\n */\nexport default class NodeLogWriter implements LogWriter {\n  public write(log: Log): void {\n    const { level, time, message, error, data } = log;\n    let content = `${formatLevel(level)} -`;\n\n    if (log.loggerLevel <= LogLevel.Debug) {\n      content = `${pc.gray(`[${formatTime(time)}]`)} ${content}`;\n    }\n\n    if (message) {\n      content += ` ${message}`;\n    } else if (isRecord(error) && typeof error.message === \"string\") {\n      content += ` ${error.message}`;\n    }\n\n    if (data != null) {\n      content += ` ${formatData(data)}`;\n    }\n\n    if (error) {\n      content += `\\n${pc.gray(formatError(error))}`;\n    }\n\n    stderr.write(content + \"\\n\");\n  }\n}\n","import { createLoggerFactory } from \"./Logger\";\nimport NodeLogWriter from \"./NodeLogWriter\";\n\nexport const createLogger = createLoggerFactory(() => new NodeLogWriter());\n","import { LogLevel } from \"./LogLevel\";\nimport { Log, LogWriter } from \"./types\";\n\n/**\n * Prints logs to console.\n *\n * @public\n */\nexport default class ConsoleLogWriter implements LogWriter {\n  public write(log: Log): void {\n    const args = [log.message, log.data, log.error].filter(Boolean);\n\n    switch (log.level) {\n      case LogLevel.Trace:\n        console.trace(...args);\n        break;\n\n      case LogLevel.Debug:\n        console.debug(...args);\n        break;\n\n      case LogLevel.Info:\n        console.info(...args);\n        break;\n\n      case LogLevel.Warn:\n        console.warn(...args);\n        break;\n\n      case LogLevel.Error:\n      case LogLevel.Fatal:\n        console.error(...args);\n        break;\n    }\n  }\n}\n","import { LogWriter } from \"./types\";\n\n/**\n * Omits logs.\n *\n * @public\n */\nexport default class SilentLogWriter implements LogWriter {\n  public write(): void {\n    // do nothing\n  }\n}\n","/**\n * Logging library.\n *\n * @packageDocumentation\n */\n\nimport { createLogger } from \"./createLogger\";\n\nexport * from \"./types\";\nexport { default as ConsoleLogWriter } from \"./ConsoleLogWriter\";\nexport { default as SilentLogWriter } from \"./SilentLogWriter\";\nexport { LogLevel, logLevelFromString } from \"./LogLevel\";\nexport { default as Logger, type LoggerOptions } from \"./Logger\";\nexport { createLogger } from \"./createLogger\";\n\nexport default createLogger();\n"],"names":["LogLevel","Trace","Debug","Info","Warn","Error","Fatal","LOG_LEVEL_MAP","trace","debug","info","warn","error","fatal","logLevelFromString","level","Logger","log","message","options","enabled","time","Date","rest","writer","write","loggerLevel","getLevel","setLevel","getWriter","setWriter","createLoggerFactory","createWriter","COLOR_MAP","pc","gray","cyan","green","yellow","red","bgRed","LEVEL_MAX_LENGTH","Math","max","Object","keys","map","x","length","formatData","data","stringify","undefined","NodeLogWriter","content","formatLevel","label","toLowerCase","padEnd","formatTime","h","getHours","toString","padStart","m","getMinutes","s","getSeconds","ms","getMilliseconds","isRecord","formatError","err","stack","cleanStack","pretty","stderr","createLogger","ConsoleLogWriter","args","filter","Boolean","console","SilentLogWriter"],"mappings":"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"}
/**
 * Logging library.
 *
 * @packageDocumentation
 */

/**
 * Prints logs to console.
 *
 * @public
 */
export declare class ConsoleLogWriter implements LogWriter {
    write(log: Log): void;
}

/**
 * @public
 */
export declare const createLogger: (options?: Partial<LoggerOptions>) => Logger;

declare const _default: Logger;
export default _default;

/**
 * @public
 */
export declare interface Log {
    loggerLevel: LogLevel;
    level: LogLevel;
    time: Date;
    message?: string;
    error?: unknown;
    data?: unknown;
}

/**
 * @public
 */
export declare class Logger {
    private level;
    private writer;
    constructor(options: Required<LoggerOptions>);
    /**
     * @example
     * Basic message
     * ```ts
     * logger.log(LogLevel.Info, "basic message");
     * ```
     *
     * @example
     * Error
     * ```ts
     * logger.log(LogLevel.Error, "error log", {
     *   error: new Error("error cause")
     * });
     * ```
     *
     * @example
     * Data
     * ```ts
     * logger.log(LogLevel.Info, "log with data", {
     *   data: {
     *     foo: "bar"
     *   }
     * });
     * ```
     */
    log(level: LogLevel, message: string, options?: Partial<Omit<Log, "level" | "message" | "loggerLevel">>): void;
    /**
     * Returns logger level.
     */
    getLevel(): LogLevel;
    /**
     * Sets logger level.
     */
    setLevel(level: LogLevel): void;
    /**
     * Returns true if the given `level` is enabled in logger.
     */
    enabled(level: LogLevel): boolean;
    /**
     * Returns writer of logger.
     */
    getWriter(): LogWriter;
    /**
     * Sets writer of logger.
     */
    setWriter(writer: LogWriter): void;
}

/**
 * @public
 */
export declare interface LoggerOptions {
    level?: LogLevel;
    writer?: LogWriter;
}

/**
 * @public
 */
export declare enum LogLevel {
    Trace = 1,
    Debug = 2,
    Info = 3,
    Warn = 4,
    Error = 5,
    Fatal = 6
}

/**
 * @public
 */
export declare function logLevelFromString(level: string): LogLevel | undefined;

/**
 * @public
 */
export declare interface LogWriter {
    write(log: Log): void;
}

/**
 * Omits logs.
 *
 * @public
 */
export declare class SilentLogWriter implements LogWriter {
    write(): void;
}

export { }

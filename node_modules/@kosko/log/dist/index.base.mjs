var LogLevel;
!function(LogLevel) {
    LogLevel[LogLevel.Trace = 1] = "Trace", LogLevel[LogLevel.Debug = 2] = "Debug", LogLevel[LogLevel.Info = 3] = "Info", LogLevel[LogLevel.Warn = 4] = "Warn", LogLevel[LogLevel.Error = 5] = "Error", LogLevel[LogLevel.Fatal = 6] = "Fatal";
}(LogLevel || (LogLevel = {}));
let LOG_LEVEL_MAP = {
    trace: LogLevel.Trace,
    debug: LogLevel.Debug,
    info: LogLevel.Info,
    warn: LogLevel.Warn,
    error: LogLevel.Error,
    fatal: LogLevel.Fatal
};
function logLevelFromString(level) {
    return LOG_LEVEL_MAP[level];
}

class ConsoleLogWriter {
    write(log) {
        let args = [
            log.message,
            log.data,
            log.error
        ].filter(Boolean);
        switch(log.level){
            case LogLevel.Trace:
                console.trace(...args);
                break;
            case LogLevel.Debug:
                console.debug(...args);
                break;
            case LogLevel.Info:
                console.info(...args);
                break;
            case LogLevel.Warn:
                console.warn(...args);
                break;
            case LogLevel.Error:
            case LogLevel.Fatal:
                console.error(...args);
        }
    }
}

class Logger {
    log(level, message, options = {}) {
        if (this.enabled(level)) {
            let { time =new Date() , ...rest } = options;
            this.writer.write({
                loggerLevel: this.level,
                level,
                message,
                time,
                ...rest
            });
        }
    }
    getLevel() {
        return this.level;
    }
    setLevel(level) {
        this.level = level;
    }
    enabled(level) {
        return this.level <= level;
    }
    getWriter() {
        return this.writer;
    }
    setWriter(writer) {
        this.writer = writer;
    }
    constructor(options){
        this.level = options.level, this.writer = options.writer;
    }
}
function createLoggerFactory(createWriter) {
    return (options = {})=>{
        let { level =LogLevel.Info , writer =createWriter()  } = options;
        return new Logger({
            level,
            writer
        });
    };
}

const createLogger = createLoggerFactory(()=>new ConsoleLogWriter());

class SilentLogWriter {
    write() {}
}

var index = createLogger();

export { ConsoleLogWriter, LogLevel, Logger, SilentLogWriter, createLogger, index as default, logLevelFromString };
//# sourceMappingURL=index.base.mjs.map

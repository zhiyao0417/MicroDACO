'use strict';

var AggregateError = require('@kosko/aggregate-error');
var commonUtils = require('@kosko/common-utils');
var extractStack = require('extract-stack');
var yaml = require('js-yaml');
var stringify = require('fast-safe-stringify');
var logger = require('@kosko/log');
var pLimit = require('p-limit');
var require$1 = require('@kosko/require');
var promises = require('node:fs/promises');
var node_path = require('node:path');
var mm = require('micromatch');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var AggregateError__default = /*#__PURE__*/_interopDefault(AggregateError);
var extractStack__default = /*#__PURE__*/_interopDefault(extractStack);
var yaml__default = /*#__PURE__*/_interopDefault(yaml);
var stringify__default = /*#__PURE__*/_interopDefault(stringify);
var logger__default = /*#__PURE__*/_interopDefault(logger);
var pLimit__default = /*#__PURE__*/_interopDefault(pLimit);
var mm__default = /*#__PURE__*/_interopDefault(mm);

let STACK_INDENT = "    ";
function aggregateErrors(errors) {
    return 1 === errors.length ? errors[0] : new AggregateError__default.default(errors);
}
function decorateErrorStack(err, values) {
    let origStack = extractStack__default.default(err.stack);
    for (let [key, value] of (err.stack = `${err.name}: ${err.message}`, Object.entries(values)))err.stack += `\n${STACK_INDENT}${key}: ${value}`;
    origStack && (err.stack += "\n" + origStack);
}
function generateCauseMessage(cause) {
    if ("string" == typeof cause) return cause;
    if (commonUtils.isRecord(cause)) {
        let { name , message , stack  } = cause;
        if ("string" != typeof message) return;
        let result = `${"string" == typeof name && name || "Error"}: ${message}`;
        if ("string" == typeof stack) {
            let extracted = extractStack__default.default(stack);
            extracted && (result += "\n" + extracted.split("\n").map((line)=>STACK_INDENT + line).join("\n"));
        }
        return result;
    }
}
class ResolveError extends Error {
    constructor(message, options = {}){
        super(message), this.path = options.path, this.index = options.index, this.cause = options.cause, this.value = options.value, function(value) {
            if (!commonUtils.isRecord(value)) return !1;
            let { apiVersion , kind , metadata  } = value;
            return "string" == typeof apiVersion && "string" == typeof kind && commonUtils.isRecord(metadata) && "string" == typeof metadata.name;
        }(this.value) && (this.component = {
            apiVersion: this.value.apiVersion,
            kind: this.value.kind,
            name: this.value.metadata.name,
            namespace: this.value.metadata.namespace
        });
        let cause = generateCauseMessage(this.cause);
        decorateErrorStack(this, {
            ...this.path && {
                Path: this.path
            },
            ...this.index?.length && {
                Index: `[${this.index.join(", ")}]`
            },
            ...this.component && {
                Kind: `${this.component.apiVersion}/${this.component.kind}`,
                ...this.component.namespace && {
                    Namespace: this.component.namespace
                },
                Name: this.component.name
            },
            ...cause && {
                Cause: cause
            }
        });
    }
}
ResolveError.prototype.name = "ResolveError";
class GenerateError extends Error {
    constructor(message, options = {}){
        super(message), this.path = options.path, this.cause = options.cause;
        let cause = generateCauseMessage(this.cause);
        decorateErrorStack(this, {
            ...this.path && {
                Path: this.path
            },
            ...cause && {
                Cause: cause
            }
        });
    }
}
GenerateError.prototype.name = "GenerateError";

exports.PrintFormat = void 0;
function stringifyYAML(data) {
    return yaml__default.default.dump(data, {
        noRefs: !0
    });
}
function stringifyJSON(data) {
    return stringify__default.default(data, void 0, "  ");
}
!function(PrintFormat) {
    PrintFormat.YAML = "yaml", PrintFormat.JSON = "json";
}(exports.PrintFormat || (exports.PrintFormat = {}));
let printers = {
    [exports.PrintFormat.YAML] (writer, data) {
        writer.write(stringifyYAML(data));
    },
    [exports.PrintFormat.JSON] (writer, data) {
        writer.write(stringifyJSON(data));
    }
}, arrPrinters = {
    [exports.PrintFormat.YAML] (writer, data) {
        for (let item of data)writer.write("---\n" + stringifyYAML(item));
    },
    [exports.PrintFormat.JSON] (writer, data) {
        writer.write(stringifyJSON({
            apiVersion: "v1",
            kind: "List",
            items: data
        }));
    }
};
function print(result, { format , writer  }) {
    let data = result.manifests.map((manifest)=>manifest.data);
    data.length && (data.length > 1 ? arrPrinters[format](writer, data) : printers[format](writer, data[0]));
}

function validateConcurrency(value = 10) {
    if (value < 1) throw Error("Concurrency must be greater than 0");
    return value;
}

async function handleResolvePromises(promises, bail) {
    if (bail) {
        let results = await Promise.all(promises);
        return results.flatMap((values)=>values);
    }
    let results1 = await Promise.allSettled(promises), errors = [], manifests = [];
    for (let result of results1)"fulfilled" === result.status ? manifests.push(...result.value) : errors.push(result.reason);
    if (errors.length) throw aggregateErrors(errors);
    return manifests;
}
async function resolve(value, options = {}) {
    let { validate =!0 , index =[] , path ="" , bail , concurrency  } = options, limit = pLimit__default.default(validateConcurrency(concurrency));
    function createResolveError(message, err) {
        return err instanceof ResolveError ? err : new ResolveError(message, {
            path,
            index,
            value,
            cause: err
        });
    }
    if ("function" == typeof value) try {
        return resolve(await value(), options);
    } catch (err) {
        throw createResolveError("Input function value thrown an error", err);
    }
    if (value instanceof Promise || value && ("function" == typeof value || "object" == typeof value) && "function" == typeof value.then) try {
        return resolve(await value, options);
    } catch (err1) {
        throw createResolveError("Input promise value rejected", err1);
    }
    if ("object" == typeof value && null != value && "function" == typeof value[Symbol.iterator]) {
        let promises = [], i = 0;
        try {
            for (let entry of value)promises.push(limit(()=>resolve(entry, {
                    ...options,
                    index: [
                        ...index,
                        i++
                    ]
                })));
        } catch (err2) {
            throw createResolveError("Input iterable value thrown an error", err2);
        }
        return handleResolvePromises(promises, bail);
    }
    if (commonUtils.isRecord(value) && "function" == typeof value[Symbol.asyncIterator]) {
        let promises1 = [], i1 = 0;
        try {
            for await (let entry1 of value)promises1.push(limit(()=>resolve(entry1, {
                    ...options,
                    index: [
                        ...index,
                        i1++
                    ]
                })));
        } catch (err3) {
            throw createResolveError("Input async iterable value thrown an error", err3);
        }
        return handleResolvePromises(promises1, bail);
    }
    if (validate && value && "function" == typeof value.validate) try {
        logger__default.default.log(logger.LogLevel.Debug, `Validating manifests ${index.join(".")} in ${options.path}`), await value.validate();
    } catch (err4) {
        throw createResolveError("Validation error", err4);
    }
    return [
        {
            path,
            index,
            data: value
        }
    ];
}

function createMatcher(patterns, baseOptions) {
    let positivePatterns = [], negativePatterns = [];
    for (let pattern of patterns){
        let parsed = mm__default.default.parse(pattern, baseOptions);
        parsed.length && parsed[0].negated ? negativePatterns.push(parsed[0].consumed) : positivePatterns.push(pattern);
    }
    let options = {
        ...baseOptions,
        ignore: negativePatterns
    };
    return (path)=>mm__default.default.isMatch(path, positivePatterns, options);
}
async function readDir(path) {
    let files = await promises.readdir(path, {
        withFileTypes: !0
    });
    return files.sort((a, b)=>a.name > b.name ? 1 : a.name < b.name ? -1 : 0);
}
async function* glob(options) {
    let matcherOptions = {
        cwd: options.path
    }, suffix = options.extensions.length > 1 ? `.{${options.extensions.join(",")}}` : `.${options.extensions.join(",")}`, dirMatcher = createMatcher(options.patterns, matcherOptions), fileMatcher = createMatcher(options.patterns.map((pattern)=>pattern + suffix), matcherOptions);
    async function* walk(path, parent) {
        for (let file of (await readDir(path))){
            let result = {
                relativePath: node_path.posix.join(parent, file.name),
                absolutePath: node_path.join(path, file.name)
            };
            file.isDirectory() ? (dirMatcher(result.relativePath) && (yield result), yield* walk(result.absolutePath, result.relativePath)) : fileMatcher(result.relativePath) && (yield result);
        }
    }
    yield* walk(options.path, "");
}

async function resolveComponentPath(path, extensions) {
    try {
        return await require$1.resolve(path, {
            extensions
        });
    } catch (err) {
        throw new GenerateError("Module path resolve failed", {
            path,
            cause: err
        });
    }
}
async function getComponentValue(path) {
    try {
        let mod = await require$1.importPath(path);
        return mod.default;
    } catch (err) {
        throw new GenerateError("Component value resolve failed", {
            path,
            cause: err
        });
    }
}
async function generate(options) {
    if (!options.components.length) throw new GenerateError("components must not be empty");
    let concurrency = validateConcurrency(options.concurrency), extensions = function(extensions = require$1.getRequireExtensions().map((ext)=>ext.substring(1))) {
        if (!extensions.length) throw new GenerateError("extensions must not be empty");
        for (let ext of extensions)if (ext.startsWith(".")) throw new GenerateError(`extension must not be started with ".": "${ext}"`);
        return extensions;
    }(options.extensions), extensionsWithDot = extensions.map((ext)=>"." + ext), promises = [], limit = pLimit__default.default(concurrency);
    async function resolveFile(file) {
        logger__default.default.log(logger.LogLevel.Debug, `Found component "${file.relativePath}"`);
        let path = await resolveComponentPath(file.absolutePath, extensionsWithDot);
        return path ? resolve(await getComponentValue(path), {
            validate: options.validate,
            bail: options.bail,
            concurrency: options.concurrency,
            index: [],
            path
        }) : (logger__default.default.log(logger.LogLevel.Debug, "Module not found", {
            data: {
                path: file.absolutePath,
                extensions: extensionsWithDot
            }
        }), []);
    }
    for await (let file of glob({
        path: options.path,
        extensions,
        patterns: options.components
    }))promises.push(limit(()=>resolveFile(file)));
    return {
        manifests: await handleResolvePromises(promises, options.bail)
    };
}

exports.GenerateError = GenerateError;
exports.ResolveError = ResolveError;
exports.generate = generate;
exports.print = print;
exports.resolve = resolve;
//# sourceMappingURL=index.node.cjs.map

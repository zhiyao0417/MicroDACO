/**
 * Finds and prints components.
 *
 * @packageDocumentation
 */

/**
 * @public
 */
export declare interface ComponentInfo {
    apiVersion: string;
    kind: string;
    name: string;
    namespace?: string;
}

/**
 * Finds components with glob patterns in the specified path and returns exported
 * values from each components.
 *
 * @remarks
 * Extension names is optional in `options.components` because it's appended
 * automatically. (e.g. `foo` =\> `foo?(.{js,json})`)
 *
 * Extensions are from `require.extensions`. You can require `ts-node/register`
 * to add support for `.ts` extension.
 *
 * Note that this function currently is only available on Node.js.
 *
 * @throws {@link GenerateError}
 * Thrown if an error occurred.
 *
 * @throws {@link @kosko/aggregate-error#AggregateError}
 * Thrown if multiple errors occurred.
 *
 * @public
 * @see {@link resolve}
 */
export declare function generate(options: GenerateOptions): Promise<Result>;

/**
 * @public
 */
export declare class GenerateError extends Error {
    readonly path?: string;
    readonly cause?: unknown;
    constructor(message: string, options?: GenerateErrorOptions);
}

/**
 * @public
 */
export declare interface GenerateErrorOptions {
    path?: string;
    cause?: unknown;
}

/**
 * @public
 */
export declare interface GenerateOptions {
    /**
     * Path of the component folder.
     */
    path: string;
    /**
     * Glob patterns of component names.
     *
     * @example
     * ```js
     * ["*"]
     * ```
     *
     * @see {@link https://en.wikipedia.org/wiki/Glob_(programming) | glob pattern}
     */
    components: readonly string[];
    /**
     * File extensions of components.
     *
     * @example
     * ```js
     * ["js", "json"]
     * ```
     */
    extensions?: readonly string[];
    /**
     * {@inheritDoc ResolveOptions.validate}
     */
    validate?: boolean;
    /**
     * {@inheritDoc ResolveOptions.bail}
     */
    bail?: boolean;
    /**
     * {@inheritDoc ResolveOptions.concurrency}
     */
    concurrency?: number;
}

/**
 * @public
 */
export declare interface Manifest {
    /**
     * Source path of a manifest.
     */
    path: string;
    /**
     * Source index of a manifest.
     */
    index: number[];
    /**
     * Manifest data.
     */
    data: unknown;
}

/**
 * Prints `result` to a {@link Writer}.
 *
 * @public
 */
export declare function print(result: Result, { format, writer }: PrintOptions): void;

/**
 * @public
 */
export declare enum PrintFormat {
    YAML = "yaml",
    JSON = "json"
}

/**
 * @public
 */
export declare interface PrintOptions {
    format: PrintFormat;
    writer: Writer;
}

/**
 * Flattens the input value and validate each values.
 *
 * @remarks
 * The `value` can be an object, an array, a `Promise`, a function, an async
 * function, an iterable, or an async iterable.
 *
 * @throws {@link ResolveError}
 * Thrown if an error occurred.
 *
 * @throws {@link @kosko/aggregate-error#AggregateError}
 * Thrown if multiple errors occurred.
 *
 * @public
 */
export declare function resolve(value: unknown, options?: ResolveOptions): Promise<Manifest[]>;

/**
 * @public
 */
export declare class ResolveError extends Error {
    readonly path?: string;
    readonly index?: number[];
    readonly cause?: unknown;
    readonly value?: unknown;
    readonly component?: ComponentInfo;
    constructor(message: string, options?: ResolveErrorOptions);
}

/**
 * @public
 */
export declare interface ResolveErrorOptions {
    path?: string;
    index?: number[];
    cause?: unknown;
    value?: unknown;
}

/**
 * @public
 */
export declare interface ResolveOptions {
    /**
     * Execute `validate` method of each values.
     *
     * @defaultValue `true`
     */
    validate?: boolean;
    /**
     * Source path of a manifest.
     *
     * @defaultValue `""`
     */
    path?: string;
    /**
     * Source index of a manifest.
     *
     * @defaultValue `[]`
     */
    index?: number[];
    /**
     * Stop immediately when an error occurred.
     *
     * @defaultValue `false`
     */
    bail?: boolean;
    /**
     * Maximum number of concurrent tasks.
     *
     * @defaultValue `10`
     */
    concurrency?: number;
}

/**
 * @public
 */
export declare interface Result {
    /**
     * Generated manifests.
     */
    manifests: Manifest[];
}

/**
 * @public
 */
export declare interface Writer {
    write(data: string): void;
}

export { }

/**
 * Contains config types and loaders.
 *
 * @packageDocumentation
 */

import { Failure } from 'superstruct';

/**
 * Global config type.
 *
 * @public
 */
export declare interface Config extends EnvironmentConfig {
    environments?: Record<string, EnvironmentConfig>;
    paths?: {
        environment?: {
            global?: string;
            component?: string;
        };
    };
    extensions?: string[];
    baseEnvironment?: string;
    bail?: boolean;
    concurrency?: number;
}

/**
 * Environment config type.
 *
 * @public
 */
export declare interface EnvironmentConfig {
    require?: string[];
    components?: string[];
    loaders?: string[];
}

/**
 * Returns environment configs merged with global configs.
 *
 * @param config - Config object.
 * @param envs - Environment name.
 * @public
 */
export declare function getConfig(config: Config, envs: string | string[]): Required<EnvironmentConfig>;

/**
 * Parses and validates a config file from the specified path.
 *
 * @param path - Path of the config file.
 * @public
 */
export declare function loadConfig(path: string): Promise<Config>;

/**
 * Searches config files in the given directory. Returns an empty object when
 * config files does not exist in the directory.
 *
 * @param path - Path to the working directory. Default to current working directory (CWD).
 * @public
 */
export declare function searchConfig(path?: string): Promise<Config>;

/**
 * Validates data against the configuration schema. It throws a {@link ValidationError}
 * when validation failed.
 *
 * @public
 */
export declare function validate(data: unknown): Config;

/**
 * @public
 */
export declare class ValidationError extends Error {
    /**
     * An array of {@link https://docs.superstructjs.org/api-reference/errors | superstruct error objects}.
     */
    readonly errors: readonly Failure[];
    constructor(errors: readonly Failure[]);
}

export { }

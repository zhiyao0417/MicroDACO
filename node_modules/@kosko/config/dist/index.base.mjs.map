{"version":3,"file":"index.base.mjs","sources":["../src/types.ts","../src/validate.ts","../src/config.ts"],"sourcesContent":["import {\n  array,\n  string,\n  object,\n  assign,\n  optional,\n  record,\n  boolean,\n  integer,\n  min\n} from \"superstruct\";\n\n/**\n * Environment config type.\n *\n * @public\n */\nexport interface EnvironmentConfig {\n  require?: string[];\n  components?: string[];\n  loaders?: string[];\n}\n\nexport const environmentConfigSchema = object({\n  require: optional(array(string())),\n  components: optional(array(string())),\n  loaders: optional(array(string()))\n});\n\n/**\n * Global config type.\n *\n * @public\n */\nexport interface Config extends EnvironmentConfig {\n  environments?: Record<string, EnvironmentConfig>;\n  paths?: {\n    environment?: {\n      global?: string;\n      component?: string;\n    };\n  };\n  extensions?: string[];\n  baseEnvironment?: string;\n  bail?: boolean;\n  concurrency?: number;\n}\n\nexport const configSchema = assign(\n  environmentConfigSchema,\n  object({\n    environments: optional(record(string(), environmentConfigSchema)),\n    paths: optional(\n      object({\n        environment: optional(\n          object({\n            global: optional(string()),\n            component: optional(string())\n          })\n        )\n      })\n    ),\n    extensions: optional(array(string())),\n    baseEnvironment: optional(string()),\n    bail: optional(boolean()),\n    concurrency: optional(min(integer(), 1))\n  })\n);\n","import { validate as sValidate, Failure } from \"superstruct\";\nimport { Config, configSchema } from \"./types\";\n\nfunction formatErrors(failures: readonly Failure[]): string {\n  return [\n    'Config file \"kosko.toml\" is invalid.',\n    ...failures.map((f) => `- \"${f.path.join(\".\")}\": ${f.message}`)\n  ].join(\"\\n\");\n}\n\n/**\n * @public\n */\nexport class ValidationError extends Error {\n  /**\n   * An array of {@link https://docs.superstructjs.org/api-reference/errors | superstruct error objects}.\n   */\n  public readonly errors: readonly Failure[];\n\n  constructor(errors: readonly Failure[]) {\n    super(formatErrors(errors));\n\n    this.errors = errors;\n  }\n}\n\nValidationError.prototype.name = \"ValidationError\";\n\n/**\n * Validates data against the configuration schema. It throws a {@link ValidationError}\n * when validation failed.\n *\n * @public\n */\nexport function validate(data: unknown): Config {\n  const result = sValidate(data, configSchema);\n\n  if (result[0]) {\n    throw new ValidationError(result[0].failures());\n  }\n\n  return result[1];\n}\n","import toml from \"@iarna/toml\";\nimport { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport { Config, EnvironmentConfig } from \"./types\";\nimport { validate } from \"./validate\";\nimport logger, { LogLevel } from \"@kosko/log\";\nimport { getErrorCode, toArray } from \"@kosko/common-utils\";\nimport { cwd } from \"node:process\";\n\n/**\n * Parses and validates a config file from the specified path.\n *\n * @param path - Path of the config file.\n * @public\n */\nexport async function loadConfig(path: string): Promise<Config> {\n  const content = await readFile(path, \"utf8\");\n  const data = await toml.parse.async(content);\n\n  logger.log(LogLevel.Debug, `Found config at \"${path}\"`);\n  return validate(data);\n}\n\n/**\n * Searches config files in the given directory. Returns an empty object when\n * config files does not exist in the directory.\n *\n * @param path - Path to the working directory. Default to current working directory (CWD).\n * @public\n */\nexport async function searchConfig(path: string = cwd()): Promise<Config> {\n  const configPath = join(path, \"kosko.toml\");\n\n  try {\n    return await loadConfig(configPath);\n  } catch (err) {\n    if (getErrorCode(err) === \"ENOENT\") return {};\n\n    logger.log(LogLevel.Debug, \"Config load failed\", { error: err });\n    throw err;\n  }\n}\n\nfunction flatten<T>(...arrays: (T[] | undefined)[]): T[] {\n  return arrays.flatMap((x) => x ?? []);\n}\n\n/**\n * Returns environment configs merged with global configs.\n *\n * @param config - Config object.\n * @param envs - Environment name.\n * @public\n */\nexport function getConfig(\n  config: Config,\n  envs: string | string[]\n): Required<EnvironmentConfig> {\n  const { environments = {} } = config;\n  const envConfigs = toArray(envs)\n    .map((env) => environments[env])\n    .filter(Boolean);\n\n  if (!envConfigs.length) {\n    return {\n      require: config.require ?? [],\n      components: config.components ?? [],\n      loaders: config.loaders ?? []\n    };\n  }\n\n  return {\n    require: flatten(config.require, ...envConfigs.map((e) => e.require)),\n    components: flatten(\n      config.components,\n      ...envConfigs.map((e) => e.components)\n    ),\n    loaders: flatten(config.loaders, ...envConfigs.map((e) => e.loaders))\n  };\n}\n"],"names":["environmentConfigSchema","object","require","optional","array","string","components","loaders","configSchema","assign","environments","record","paths","environment","global","component","extensions","baseEnvironment","bail","boolean","concurrency","min","integer","ValidationError","Error","constructor","errors","failures","map","f","path","join","message","prototype","name","validate","data","result","sValidate","loadConfig","content","readFile","toml","parse","async","logger","log","LogLevel","Debug","searchConfig","cwd","configPath","err","getErrorCode","error","flatten","arrays","flatMap","x","getConfig","config","envs","envConfigs","toArray","env","filter","Boolean","length","e"],"mappings":"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"}
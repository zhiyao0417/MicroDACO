"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.ajv = void 0;
const tslib_1 = require("tslib");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const ajv_formats_1 = tslib_1.__importDefault(require("ajv-formats"));
const ajv_formats_draft2019_1 = tslib_1.__importDefault(require("ajv-formats-draft2019"));
// From: https://github.com/miguelmota/is-base64/blob/0702e189090921a2f11b4342f27906ff8c43d7ec/is-base64.js#L15
const rBase64 = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
// https://github.com/kubernetes/apimachinery/blob/8c18d83/pkg/api/resource/quantity.go
const rSignedNumber = /[+-]?(?:\d+|\d+\.\d+|\d+\.|\.\d+)/;
// https://physics.nist.gov/cuu/Units/binary.html
const rBinarySI = /[KMGTPE]i/;
// https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes
const rDecimalSI = /(?:[YZEPTGMkhdcmunpfazy]|da)/;
const rDecimalExponent = new RegExp(`[eE]${rSignedNumber.source}`);
const rQuantitySuffix = new RegExp(`(?:${rBinarySI.source}|${rDecimalSI.source}|${rDecimalExponent.source})?`);
const rQuantity = new RegExp(`^${rSignedNumber.source}${rQuantitySuffix.source}$`);
exports.ajv = new ajv_1.default({
    strictTypes: false,
    allErrors: true,
    verbose: true
});
(0, ajv_formats_1.default)(exports.ajv);
(0, ajv_formats_draft2019_1.default)(exports.ajv);
function register(id, schema) {
    if (!exports.ajv.getSchema(id)) {
        exports.ajv.addSchema(schema, id);
    }
}
exports.register = register;
exports.ajv.addFormat("byte", {
    type: "string",
    validate: (value) => rBase64.test(value)
});
exports.ajv.addFormat("quantity", {
    type: "string",
    validate: rQuantity
});
// This format is used in Istio.
exports.ajv.addFormat("string", {
    type: "string",
    validate: (value) => typeof value === "string"
});
//# sourceMappingURL=ajv.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const tslib_1 = require("tslib");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const ajv_2 = require("./ajv.js");
function excludeNullableRefErrors(errors) {
    const result = [];
    const schemaPathsToExclude = new Set();
    for (const err of errors) {
        /*
          We want to exclude nullable $ref type like this:
    
          {
            instancePath: '',
            schemaPath: '#/oneOf',
            keyword: 'oneOf',
            params: { passingSchemas: null },
            message: 'must match exactly one schema in oneOf',
            schema: [ { '$ref': 'str' }, { type: 'null' } ],
            parentSchema: { oneOf: [ [Object], [Object] ] },
            data: 3.14
          }
         */
        if (err.keyword === "oneOf") {
            const nullTypeIndex = err.schema?.findIndex((x) => x.type === "null");
            if (nullTypeIndex > -1) {
                /*
                  oneOf error usually comes with the error below, and we want to remove
                  it as well.
                  {
                    instancePath: '',
                    schemaPath: '#/oneOf/1/type',
                    keyword: 'type',
                    params: { type: 'null' },
                    message: 'must be null',
                    schema: 'null',
                    parentSchema: { type: 'null' },
                    data: 3.14
                  }
                 */
                schemaPathsToExclude.add(`${err.schemaPath}/${nullTypeIndex}/type`);
                continue;
            }
        }
        result.push(err);
    }
    return result.filter((x) => !schemaPathsToExclude.has(x.schemaPath));
}
function validate(id, data) {
    if (!ajv_2.ajv.validate(id, data) && ajv_2.ajv.errors) {
        const errors = excludeNullableRefErrors(ajv_2.ajv.errors);
        const err = new ajv_1.default.ValidationError(errors);
        err.message = ajv_2.ajv.errorsText(errors);
        throw err;
    }
}
exports.validate = validate;
//# sourceMappingURL=validate.js.map